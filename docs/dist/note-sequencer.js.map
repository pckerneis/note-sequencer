{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/canvas-components/BaseComponent.ts","webpack:///./src/ts/note-sequencer.ts","webpack:///./src/ts/canvas-components/RenderHelpers.ts","webpack:///./src/ts/canvas-components/LassoSelector.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/canvas-components/RootComponentHolder.ts","webpack:///./src/ts/canvas-components/SequencerRoot.ts","webpack:///./src/ts/canvas-components/DraggableBorder.ts","webpack:///./src/ts/canvas-components/NoteGridComponent.ts","webpack:///./src/ts/canvas-components/SelectedItemSet.ts","webpack:///./src/ts/canvas-components/PitchRuler.ts","webpack:///./src/ts/canvas-components/TimeRuler.ts","webpack:///./src/ts/utils.ts","webpack:///./src/ts/canvas-components/VelocityRuler.ts","webpack:///./src/ts/canvas-components/VelocityTrack.ts","webpack:///./src/ts/custom-element/CustomElement.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ComponentBounds","x","y","width","height","this","Math","ceil","amount","floor","max","min","removed","Component","_bounds","_children","_parent","_visible","_needRepaint","box1","box2","canvas","document","createElement","_mouseCursor","cursor","hovered","_beingDragged","body","style","_hovered","holder","_rootHolder","childComp","Error","push","idx","indexOf","splice","parent","undefined","newBounds","resized","mousePosition","pos","getPosition","position","length","hitTest","findComponentAt","isOriginalRepaintTarget","forEach","child","repaint","root","paint","renderingContext","event","isDragging","pressedComponent","mouseCursor","context","g","createOffscreenCanvas","render","getContext","drawImage","MIN_SEMI_H","MAX_SEMI_H","PITCH_PATTERN","MIN_PITCH","MAX_PITCH","MAX_VELOCITY","defaultColors","background","backgroundAlternate","backgroundBlackKey","strokeLight","strokeDark","text","velocityHandle","velocityHandleSelected","whiteKey","blackKey","noteHigh","noteLowBlend","noteOutline","noteOutlineSelected","draggableBorder","draggableBorderHover","lassoBackground","lassoOutline","NoteSequencer","CustomElement","super","_model","verticalRange","start","end","visibleTimeRange","maxTimeRange","signature","upper","lower","zoomSensitivity","adaptiveMode","colors","_shadowRoot","attachShadow","_sequencerRoot","SequencerRoot","RootComponentHolder","append","styleElement","innerText","CSS_STYLE","ResizeObserver","resizeAndDraw","observe","MutationObserver","styleChanged","attributes","keys","registerCustomColor","TIME_START","numberValue","Number","isNaN","setTimeStart","setAttribute","toString","newValue","setDuration","DURATION","attachMouseEventListeners","timeStart","duration","removeMouseEventListeners","draw","customColors","color","boundingClientRect","getBoundingClientRect","resize","getBackgroundAlternateWidth","sixteenth","alternate","x1","y1","x2","y2","incr","alternateBackgroundWidth","fillStyle","fillRect","round","velocity","selected","globalAlpha","lineWidth","strokeStyle","strokeRect","ownerComp","selectedItemSet","ownerPos","lasso","startX","startY","endX","endY","commuteMode","modifiers","shift","commutableSelection","getItems","lassoBounds","abs","lassoSelection","findAllElementsInLasso","deselectAll","addToSelection","removeFromSelection","w","h","customElements","tag","define","extractModifiers","mouseEvent","shiftKey","option","ctrlKey","rootComponent","rootHolder","initMouseEventListeners","setBounds","mouseDownPos","mouseUpPos","mouseDownTime","mouseUpTime","lastClickTime","lastClickPos","componentUnderMouse","consecutiveClickCount","consecutivePressCount","wasDragged","mousePositionRelativeToCanvas","canvasBounds","clientX","clientY","hit","action","mousePos","hitComponent","canvasMouseDownListener","component","performance","now","mousePressed","positionAtMouseDown","squaredDistance","doublePressed","documentMouseUpListener","mouseReleased","clicked","doubleClicked","documentMouseMoveListener","mouseExit","mouseEnter","mouseMoved","buttons","mouseDragged","addEventListener","removeEventListener","model","_grid","NoteGridComponent","addAndMakeVisible","_pitchRuler","PitchRuler","_timeRuler","TimeRuler","_velocityRuler","VelocityRuler","_draggableBorder","DraggableBorder","_velocityTrack","VelocityTrack","draggableBorderPosition","velocityHeight","bounds","getLocalBounds","velocityBounds","removeFromBottom","removeFromLeft","hRulerBounds","removeFromTop","newPosition","snapThreshold","offset","leftExcess","rightExcess","owner","initialPosition","borderDragged","adaptiveLabels","adaptiveRatios","adaptiveIndex","fixedIncrements","fixedIndex","_notes","_mouseDownResult","_currentVelocity","_initialDuration","_initialStart","_initialVelocity","_initialPosition","_minStartOffset","_maxDurationOffset","_minDragOffset","_maxDragOffset","_selectedSet","SelectedItemSet","_lasso","LassoSelector","filter","note","noteBounds","getPositionForTime","time","getPositionForPitch","pitch","getSixteenthWidth","getSemitoneHeight","boundsIntersect","hMin","hMax","drawHorizontalBackground","semiHeight","drawSemiTonePattern","drawOctaveLines","drawLasso","drawNotes","getParentComponent","removeNote","semi","vRange","local","existingNote","findNoteAt","snapToGrid","getTimeAt","newNote","getPitchAt","getTimeIncrement","hidden","tempDuration","initialStart","initialVelocity","setUniqueSelection","removeOverlaps","_dragAction","_draggedItem","getDragActionForNoteAt","beginLasso","addToSelectionMouseDown","setMouseCursor","moveNoteToFront","endLasso","addToSelectionMouseUp","dragLasso","moveSelection","dragEndPoints","dragStartPoints","dragVelocity","denominator","b","withOriginOne","mbs","getTimeAsMBS","useSixteenth","ratio","desiredSpacing","currentPosition","selectionLeft","Infinity","selectionRight","selectionTop","selectionBottom","dragOffset","scaledX","scaledY","gridOffsetX","gridOffsetY","currentDuration","snappedEndPoint","currentStart","currentEndPoint","startOffset","endPoint","drawTimeBackground","drawNote","yOffset","pitchClass","viewportY","apply","noteX","noteW","localPos","notes","_selection","_itemAboutToBeSelected","onchange","item","isShiftKeyDown","includes","doAddToSelection","wasMouseDragged","actionConsumedOnMouseDown","notify","grid","dragStarted","currentlyTranslating","currentlyZooming","consecutiveHorizontalDrag","consecutiveVerticalDrag","isPreviewingNote","lastPreviewedPitch","isPianoRollVisible","previewNoteAt","lastMouseX","lastMouseY","xOffset","shouldTranslate","translate","zoomIn","zoomOut","isBlack","txt","fillText","range","zoomAmount","desiredMin","clipped","correctAmount","desiredMax","shouldZoom","timeAtMouseDown","rangeAtMouseDown","zoomAtMouseDown","amountToAdd","newStart","newEnd","excess","distanceToLeft","distanceToRight","clamp","gradH","rect","getStringForTime","a","handleRadius","selectedSet","vScale","_draggingHandle","handle","findHandleAt","dragSelectedHandles","drawVelocityHandles","beginPath","arc","PI","fill","stroke","scaled","HTMLElement","propertyName","split","join","toLowerCase","defaultValue","state","cssName","getCssName","computedStyle","window","getComputedStyle","colorState","getPropertyValue"],"mappings":"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","file":"note-sequencer.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import {RootComponentHolder} from './RootComponentHolder';\r\n\r\nexport interface ComponentPosition {\r\n  x: number,\r\n  y: number,\r\n}\r\n\r\nexport interface IBounds {\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n}\r\n\r\nexport class ComponentBounds implements IBounds {\r\n  public x: number = 0;\r\n  public y: number = 0;\r\n  public width: number = 0;\r\n  public height: number = 0;\r\n\r\n  constructor(x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\r\n    this.x = Math.ceil(x);\r\n    this.y = Math.ceil(y);\r\n    this.width = Math.ceil(width);\r\n    this.height = Math.ceil(height);\r\n  }\r\n\r\n  public removeFromLeft(amount: number): ComponentBounds {\r\n    amount = Math.floor(Math.max(0, Math.min(amount, this.width)));\r\n\r\n    const removed = new ComponentBounds(this.x, this.y, amount, this.height);\r\n\r\n    this.x += amount;\r\n    this.width -= amount;\r\n\r\n    return removed;\r\n  }\r\n\r\n  public removeFromTop(amount: number): ComponentBounds {\r\n    amount = Math.floor(Math.max(0, Math.min(amount, this.height)));\r\n\r\n    const removed = new ComponentBounds(this.x, this.y, this.width, amount);\r\n\r\n    this.y += amount;\r\n    this.height -= amount;\r\n\r\n    return removed;\r\n  }\r\n\r\n  public removeFromBottom(amount: number): ComponentBounds {\r\n    amount = Math.floor(Math.max(0, Math.min(amount, this.height)));\r\n\r\n    const removed = new ComponentBounds(this.x, this.height - amount, this.width, amount);\r\n\r\n    this.height -= amount;\r\n\r\n    return removed;\r\n  }\r\n}\r\n\r\nexport interface ComponentMouseEvent {\r\n  isDragging: boolean;\r\n  positionAtMouseDown: ComponentPosition,\r\n  position: ComponentPosition,\r\n  pressedComponent: Component,\r\n  wasDragged: boolean,\r\n  modifiers: {shift: boolean, option: boolean}\r\n}\r\n\r\n/**\r\n * A node in a canvas-based component tree.\r\n */\r\nexport abstract class Component {\r\n\r\n  private _children: Component[] = [];\r\n  private _parent: Component = null;\r\n  private _visible: boolean = true;\r\n  private _needRepaint: boolean = true;\r\n  private _rootHolder: RootComponentHolder<this>;\r\n  private _hovered: boolean;\r\n  private _mouseCursor: string;\r\n  private _beingDragged: boolean;\r\n\r\n  protected constructor(private _bounds: ComponentBounds = new ComponentBounds()) {\r\n  }\r\n\r\n  public static boundsIntersect(box1: IBounds, box2: IBounds): boolean {\r\n    return ! ((box2.x >= box1.x + box1.width) || (box2.x + box2.width <= box1.x)\r\n      || (box2.y >= box1.y + box1.height) || (box2.y + box2.height <= box1.y));\r\n  }\r\n\r\n  private static createOffscreenCanvas(width: number, height: number): HTMLCanvasElement {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    return canvas;\r\n  }\r\n\r\n  public get mouseCursor(): string {\r\n    return this._mouseCursor;\r\n  }\r\n\r\n  public set mouseCursor(cursor: string) {\r\n    this._mouseCursor = cursor;\r\n\r\n    if (this.hovered || this._beingDragged) {\r\n      document.body.style.cursor = this._mouseCursor;\r\n    }\r\n  }\r\n\r\n  public get hovered(): boolean {\r\n    return this._hovered;\r\n  }\r\n\r\n  public get width(): number {\r\n    return Math.ceil(this._bounds.width);\r\n  }\r\n\r\n  public get height(): number {\r\n    return Math.ceil(this._bounds.height);\r\n  }\r\n\r\n  public set rootHolder(holder: RootComponentHolder<this>) {\r\n    this._rootHolder = holder;\r\n  }\r\n\r\n  public getParentComponent(): Component {\r\n    return this._parent;\r\n  }\r\n\r\n  public addAndMakeVisible(childComp: Component): void {\r\n    if (childComp._parent != null) {\r\n      throw new Error('A component cannot be added to multiple parents. ' +\r\n        'You first need to remove it from its previous parent');\r\n    }\r\n\r\n    childComp._visible = true;\r\n    this._children.push(childComp);\r\n    childComp._parent = this;\r\n  }\r\n\r\n  public removeChild(childComp: Component): void {\r\n    const idx = this._children.indexOf(childComp);\r\n\r\n    if (idx >= 0) {\r\n      childComp._visible = false;\r\n      childComp._parent = null;\r\n      this._children.splice(idx, 1);\r\n    }\r\n  }\r\n\r\n  public getPosition(): ComponentPosition {\r\n    let x = this._bounds.x;\r\n    let y = this._bounds.y;\r\n    let parent = this._parent;\r\n\r\n    while (parent != undefined) {\r\n      x += parent._bounds.x;\r\n      y += parent._bounds.y;\r\n      parent = parent._parent;\r\n    }\r\n\r\n    return {x, y};\r\n  }\r\n\r\n  public getLocalBounds(): ComponentBounds {\r\n    return new ComponentBounds(0, 0, this.width, this.height);\r\n  }\r\n\r\n  public setBounds(newBounds: ComponentBounds): void {\r\n    this._bounds = newBounds;\r\n    this.resized();\r\n  }\r\n\r\n  public toFront(): void {\r\n    if (this._parent == null) {\r\n      return;\r\n    }\r\n\r\n    const idx = this._parent._children.indexOf(this);\r\n\r\n    if (idx < 0)\r\n      return;\r\n\r\n    this._parent._children.splice(idx, 1);\r\n    this._parent._children.push(this);\r\n  }\r\n\r\n  public hitTest(mousePosition: ComponentPosition): boolean {\r\n    if (!this._visible)\r\n      return false;\r\n\r\n    const pos = this.getPosition();\r\n\r\n    if (mousePosition.x < pos.x || mousePosition.x > pos.x + this._bounds.width) {\r\n      return false;\r\n    }\r\n\r\n    return !(mousePosition.y < pos.y || mousePosition.y > pos.y + this._bounds.height);\r\n  }\r\n\r\n  public findComponentAt(position: ComponentPosition): Component {\r\n    for (let i = this._children.length; --i >= 0;) {\r\n      const c = this._children[i];\r\n\r\n      if (c.hitTest(position)) {\r\n        return c.findComponentAt(position);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public repaint(isOriginalRepaintTarget: boolean = true): void {\r\n    this._needRepaint = true;\r\n\r\n    // Mark all children so that they will repaint\r\n    this._children.forEach(child => child.repaint(false));\r\n\r\n    if (isOriginalRepaintTarget) {\r\n      // Find root component\r\n      let root: Component = this;\r\n\r\n      while (root._parent != null) {\r\n        root = root._parent;\r\n      }\r\n\r\n      // Render\r\n      if (root._rootHolder != null) {\r\n        root.paint(root._rootHolder.renderingContext);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Mouse events\r\n\r\n  public mouseMoved(event: ComponentMouseEvent): void {\r\n    this._beingDragged = event.isDragging && event.pressedComponent === this;\r\n  }\r\n\r\n  public mouseEnter(event: ComponentMouseEvent): void {\r\n    if (event.isDragging) {\r\n      this._hovered = event.pressedComponent === this;\r\n    } else {\r\n      this._hovered = true;\r\n    }\r\n\r\n    if (this._hovered) {\r\n      document.body.style.cursor = this.mouseCursor;\r\n    }\r\n  }\r\n\r\n  public mouseExit(event: ComponentMouseEvent): void {\r\n    if (event.isDragging) {\r\n      this._hovered = event.pressedComponent === this;\r\n    } else {\r\n      this._hovered = false;\r\n    }\r\n  }\r\n\r\n  public mousePressed(event: ComponentMouseEvent): void {\r\n  }\r\n\r\n  public mouseReleased(event: ComponentMouseEvent): void {\r\n  }\r\n\r\n  public mouseDragged(event: ComponentMouseEvent): void {\r\n  }\r\n\r\n  public clicked(event: ComponentMouseEvent): void {\r\n  }\r\n\r\n  public doublePressed(event: ComponentMouseEvent): void {\r\n  }\r\n\r\n  public doubleClicked(event: ComponentMouseEvent): void {\r\n  }\r\n\r\n  // Resizing and rendering\r\n\r\n  protected abstract resized(): void;\r\n\r\n  protected abstract render(g: CanvasRenderingContext2D): void;\r\n\r\n  /**\r\n   * Renders this component and its children on a canvas rendering context. This method shouldn't be used directly and\r\n   * 'repaint' should be used instead when the component needs to be re-rendered.\r\n   *\r\n   * @param context the canvas context to use\r\n   */\r\n  private paint(context: CanvasRenderingContext2D): void {\r\n    if (this._visible && this._needRepaint && Math.floor(this._bounds.width) > 0 && Math.floor(this._bounds.height) > 0) {\r\n      const g = Component.createOffscreenCanvas(Math.ceil(this._bounds.width), Math.ceil(this._bounds.height));\r\n\r\n      this.render(g.getContext('2d'));\r\n\r\n      context.drawImage(g, Math.floor(this._bounds.x), Math.floor(this._bounds.y));\r\n    }\r\n\r\n    this._children.forEach(child => child.paint(context));\r\n\r\n    this._needRepaint = false;\r\n  }\r\n}\r\n","import {RootComponentHolder} from './canvas-components/RootComponentHolder';\r\nimport {SequencerRoot} from './canvas-components/SequencerRoot';\r\nimport {CustomElement} from './custom-element/CustomElement';\r\n\r\nexport const MIN_SEMI_H: number = 4;\r\nexport const MAX_SEMI_H: number = 30;\r\nexport const PITCH_PATTERN: number[] = [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0];\r\nexport const MIN_PITCH: number = 0;\r\nexport const MAX_PITCH: number = 127;\r\nexport const MAX_VELOCITY: number = 127;\r\n\r\ndeclare class ResizeObserver {\r\n  constructor(...args: any[]);\r\n\r\n  public observe(...elements: HTMLElement[]): any;\r\n}\r\n\r\nexport interface Range {\r\n  start: number,\r\n  end: number,\r\n}\r\n\r\nexport interface TimeSignature {\r\n  upper: number,\r\n  lower: number,\r\n}\r\n\r\nexport interface SequencerDisplayModel {\r\n  zoomSensitivity: number;\r\n  verticalRange: Range,\r\n  visibleTimeRange: Range,\r\n  maxTimeRange: Range,\r\n  signature: TimeSignature,\r\n  adaptiveMode: boolean,\r\n  colors: Colors,\r\n}\r\n\r\nexport interface Colors {\r\n  background: string,\r\n  backgroundAlternate: string,\r\n  backgroundBlackKey: string,\r\n  strokeLight: string,\r\n  strokeDark: string,\r\n  text: string,\r\n  velocityHandle: string,\r\n  velocityHandleSelected: string,\r\n  whiteKey: string,\r\n  blackKey: string,\r\n  noteHigh: string,\r\n  noteLowBlend: string,\r\n  noteOutline: string,\r\n  noteOutlineSelected: string,\r\n  draggableBorder: string,\r\n  draggableBorderHover: string,\r\n  lassoBackground: string,\r\n  lassoOutline: string,\r\n}\r\n\r\nconst defaultColors: Colors = {\r\n  background: '#eeeeee',\r\n  backgroundAlternate: '#00000010',\r\n  backgroundBlackKey: '#00000025',\r\n  strokeLight: '#00000020',\r\n  strokeDark: '#00000050',\r\n  text: '#000000',\r\n  velocityHandle: '#ff9200',\r\n  velocityHandleSelected: '#00a8ff',\r\n  whiteKey: '#ffffff',\r\n  blackKey: '#5e5e5e',\r\n  noteHigh: '#ff3a36',\r\n  noteLowBlend: '#959eb7',\r\n  noteOutline: '#606060',\r\n  noteOutlineSelected: '#00a8ff',\r\n  draggableBorder: '#8f8f8f',\r\n  draggableBorderHover: '#676767',\r\n  lassoBackground: '#00a8ff20',\r\n  lassoOutline: '#00a8ff80',\r\n};\r\n\r\n/**\r\n * A canvas-based note sequencer.\r\n *\r\n * @noInheritDoc\r\n */\r\nexport class NoteSequencer extends CustomElement {\r\n  public static readonly TIME_START: string = 'time-start';\r\n  public static readonly DURATION: string = 'duration';\r\n\r\n  private _shadowRoot: ShadowRoot;\r\n  private _rootHolder: RootComponentHolder<SequencerRoot>;\r\n  private readonly _model: SequencerDisplayModel;\r\n  private readonly _sequencerRoot: SequencerRoot;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this._model = {\r\n      verticalRange: {start: 58, end: 58 + 24},\r\n      visibleTimeRange: {start: 0, end: 16},\r\n      maxTimeRange: {start: 0, end: 16},\r\n      signature: {upper: 4, lower: 4},\r\n      zoomSensitivity: 30,\r\n      adaptiveMode: true,\r\n      colors: defaultColors,\r\n    };\r\n\r\n    this._shadowRoot = this.attachShadow({mode: 'closed'});\r\n\r\n    this._sequencerRoot = new SequencerRoot(this._model);\r\n    this._rootHolder = new RootComponentHolder<SequencerRoot>(100, 100, this._sequencerRoot);\r\n\r\n    this._shadowRoot.append(this._rootHolder.canvas);\r\n\r\n    const styleElement = document.createElement('style');\r\n    styleElement.innerText = CSS_STYLE;\r\n    this._shadowRoot.append(styleElement);\r\n\r\n    // Events handlers\r\n    const resizeObserver = new ResizeObserver(() => this.resizeAndDraw());\r\n    resizeObserver.observe(this);\r\n\r\n    const styleObserver = new MutationObserver(() => {\r\n      this.styleChanged();\r\n    });\r\n\r\n    styleObserver.observe(this, { attributes: true });\r\n\r\n    Object.keys(this._model.colors).forEach((key) => {\r\n      this.registerCustomColor(key, this._model.colors[key]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * HTML tag name used for this element.\r\n   */\r\n  public static get tag(): string {\r\n    return 'note-sequencer';\r\n  }\r\n\r\n  /**\r\n   * Observed HTML attributes (custom element implementation).\r\n   */\r\n  public static get observedAttributes(): string[] {\r\n    return [\r\n      NoteSequencer.TIME_START,\r\n      'duration',\r\n      'pitch-start',\r\n      'pitch-end',\r\n    ];\r\n  }\r\n\r\n  public get colors(): Colors {\r\n    return this._model.colors;\r\n  }\r\n\r\n  // Attributes/properties reflection\r\n\r\n  /**\r\n   * First time value to show.\r\n   */\r\n  public get timeStart(): number {\r\n    return this._model.maxTimeRange.start;\r\n  }\r\n\r\n  public set timeStart(value: number) {\r\n    let numberValue: number = Number(value);\r\n\r\n    if (isNaN(numberValue)) {\r\n      throw new Error('Unhandled type error when setting timeStart');\r\n    }\r\n\r\n    numberValue = this._sequencerRoot.setTimeStart(numberValue);\r\n\r\n    this.setAttribute(NoteSequencer.TIME_START, numberValue.toString());\r\n  }\r\n\r\n  /**\r\n   * Maximum visible time range from timeStart.\r\n   */\r\n  public get duration(): number {\r\n    return this._model.maxTimeRange.start + this._model.maxTimeRange.end;\r\n  }\r\n\r\n  public set duration(newValue: number) {\r\n    let numberValue: number = Number(newValue);\r\n\r\n    if (isNaN(numberValue)) {\r\n      throw new Error('Unhandled type error when setting duration');\r\n    }\r\n\r\n    numberValue = this._sequencerRoot.setDuration(numberValue);\r\n\r\n    this.setAttribute(NoteSequencer.DURATION, numberValue.toString());\r\n  }\r\n\r\n  // CustomElement implementation\r\n\r\n  /**\r\n   * Called when the HTML node is first connected to the DOM (custom element implementation).\r\n   */\r\n  public connectedCallback(): void {\r\n    this._rootHolder.attachMouseEventListeners();\r\n\r\n    this.timeStart = this.timeStart         || 0;\r\n    this.duration = this.duration           || 16;\r\n\r\n    this.resizeAndDraw();\r\n  }\r\n\r\n  public disconnectedCallback(): void {\r\n    this._rootHolder.removeMouseEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Called whenever an observed HTML attribute changes (custom element implementation). Redraws the component.\r\n   */\r\n  public attributeChangedCallback(/* name, oldValue, newValue */): void {\r\n    this.draw();\r\n  }\r\n\r\n  public draw(): void {\r\n    this._rootHolder.repaint();\r\n  }\r\n\r\n  protected styleChanged(): void {\r\n    super.styleChanged();\r\n\r\n    this.customColors.forEach((color) => {\r\n      this._model.colors[color.name] = color.value;\r\n    });\r\n\r\n    this.draw();\r\n  }\r\n\r\n  private resizeAndDraw(): void {\r\n    const boundingClientRect = this.getBoundingClientRect();\r\n    this._rootHolder.resize(Math.ceil(boundingClientRect.width), Math.ceil(boundingClientRect.height));\r\n    this.draw();\r\n  }\r\n}\r\n\r\nconst CSS_STYLE = `\r\n:host {\r\n  display: block;\r\n}\r\n\r\nnote-sequencer {\r\n  box-sizing: border-box;\r\n  display: block;\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\nnote-sequencer canvas {\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n}\r\n`;\r\n","import {Colors, TimeSignature} from '../note-sequencer';\r\n\r\nexport function squaredDistance(x1: number, y1: number, x2: number, y2: number): number {\r\n  return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\r\n}\r\n\r\nexport function getBackgroundAlternateWidth(sixteenth: number, signature: TimeSignature): number {\r\n  const minAlternate = 100;\r\n  const maxAlternate = 200;\r\n\r\n  let alternate = (16 * signature.upper) / signature.lower;\r\n\r\n  // If a measure is too big, try alternating with each beat\r\n  if (alternate * sixteenth > maxAlternate) {\r\n    alternate /= signature.upper;\r\n\r\n    // If it's still to big, subdivide beat\r\n    while (alternate * sixteenth > maxAlternate)\r\n      alternate /= 2;\r\n  } else {\r\n    // If it's too small, multiply measure by 2\r\n    while (alternate * sixteenth < minAlternate)\r\n      alternate *= 2;\r\n  }\r\n\r\n  return alternate\r\n}\r\n\r\nexport function drawTimeBackground(g: CanvasRenderingContext2D, height: number, sixteenth: number,\r\n     incr: number, start: number, end: number, signature: TimeSignature, colors: Colors): void {\r\n  const alternateBackgroundWidth = getBackgroundAlternateWidth(sixteenth, signature);\r\n\r\n  for (let i = 0; i < Math.ceil(end); i += incr) {\r\n    const x = (i - start) * sixteenth;\r\n\r\n    g.fillStyle = colors.backgroundAlternate;\r\n\r\n    if (i % (alternateBackgroundWidth * 2) == 0) {\r\n      g.fillRect(x, 0, alternateBackgroundWidth * sixteenth, height);\r\n    }\r\n\r\n    if (x < 0) {\r\n      continue;\r\n    }\r\n\r\n    if (i % ((16 * signature.upper) / signature.lower) == 0) {\r\n      // Larger lines for measures\r\n      g.fillStyle = colors.strokeDark;\r\n      g.fillRect(x, 0, 1, height);\r\n    } else if (Math.round(i % incr) == 0) {\r\n      // Regular lines\r\n      g.fillStyle = colors.strokeLight;\r\n      g.fillRect(x, 0, 1, height);\r\n    }\r\n  }\r\n}\r\n\r\nexport function drawNote(g: CanvasRenderingContext2D, x: number, y: number, width: number, height: number,\r\n                         velocity: number, selected: boolean, colors: Colors): void {\r\n\r\n  g.fillStyle = colors.noteHigh;\r\n  g.fillRect(x, y, width, height);\r\n\r\n  g.globalAlpha = 1 - velocity / 127;\r\n  g.fillStyle = colors.noteLowBlend;\r\n  g.fillRect(x, y, width, height);\r\n\r\n  g.globalAlpha = 1;\r\n  g.lineWidth = selected ? 2 : 1;\r\n  g.strokeStyle = selected ? colors.noteOutlineSelected : colors.noteOutline;\r\n  g.strokeRect(x, y, width, height);\r\n}","import {Colors} from '../note-sequencer';\r\nimport {Component, ComponentMouseEvent, IBounds} from './BaseComponent';\r\nimport {SelectableItem, SelectedItemSet} from './SelectedItemSet';\r\n\r\ninterface Lasso<T extends SelectableItem> {\r\n  startX: number,\r\n  startY: number,\r\n  endX: number,\r\n  endY: number,\r\n  commuteMode: boolean,\r\n  commutableSelection: T[],\r\n}\r\n\r\nexport class LassoSelector<T extends SelectableItem> {\r\n\r\n  public findAllElementsInLasso: (lassoBounds: IBounds) => T[];\r\n\r\n  private lasso: Lasso<T>;\r\n\r\n  constructor(public readonly ownerComp: Component, public readonly selectedItemSet: SelectedItemSet<T>,\r\n              public readonly colors: Colors) {\r\n  }\r\n\r\n  public beginLasso(event: ComponentMouseEvent): void {\r\n    const ownerPos = this.ownerComp.getPosition();\r\n\r\n    this.lasso = {\r\n      startX: event.position.x - ownerPos.x,\r\n      startY: event.position.y - ownerPos.y,\r\n      endX: event.position.x - ownerPos.x,\r\n      endY: event.position.y - ownerPos.y,\r\n      commuteMode: event.modifiers.shift,\r\n      commutableSelection: [],\r\n    };\r\n\r\n    if (event.modifiers.shift) {\r\n      this.lasso.commutableSelection = this.selectedItemSet.getItems();\r\n    }\r\n  }\r\n\r\n  public endLasso(): void {\r\n    this.lasso = null;\r\n  }\r\n\r\n  public dragLasso(event: ComponentMouseEvent): void {\r\n    if (this.lasso == null) {\r\n      return;\r\n    }\r\n\r\n    const ownerPos = this.ownerComp.getPosition();\r\n\r\n    this.lasso.endX = event.position.x - ownerPos.x;\r\n    this.lasso.endY = event.position.y - ownerPos.y;\r\n\r\n    const lassoBounds: IBounds = {\r\n      x: Math.min(this.lasso.startX, this.lasso.endX),\r\n      y: Math.min(this.lasso.startY, this.lasso.endY),\r\n      width: Math.abs(this.lasso.startX - this.lasso.endX),\r\n      height: Math.abs(this.lasso.startY - this.lasso.endY),\r\n    };\r\n\r\n\r\n    let lassoSelection;\r\n\r\n    if (typeof this.findAllElementsInLasso === 'function') {\r\n      lassoSelection = this.findAllElementsInLasso(lassoBounds);\r\n    }\r\n\r\n    if (lassoSelection == null)\r\n      return;\r\n\r\n    if (this.lasso.commuteMode) {\r\n      // Restore selection from mouse down\r\n      this.selectedItemSet.deselectAll();\r\n\r\n      for (let s of this.lasso.commutableSelection)\r\n        this.selectedItemSet.addToSelection (s);\r\n\r\n      // Browse current lasso selection\r\n      for (let s of lassoSelection) {\r\n        if (this.selectedItemSet.getItems().indexOf (s) >= 0) {\r\n          // If the item is already selected, deselect it\r\n          this.selectedItemSet.removeFromSelection (s);\r\n        } else {\r\n          // Else add it to the selection\r\n          this.selectedItemSet.addToSelection (s);\r\n        }\r\n      }\r\n    } else {\r\n      this.selectedItemSet.deselectAll();\r\n\r\n      for (let s of lassoSelection)\r\n        this.selectedItemSet.addToSelection (s);\r\n    }\r\n  }\r\n\r\n  public drawLasso(g: CanvasRenderingContext2D): void {\r\n    if (this.lasso == null) {\r\n      return;\r\n    }\r\n\r\n    g.fillStyle = this.colors.lassoBackground;\r\n    g.strokeStyle = this.colors.lassoOutline;\r\n    g.lineWidth = 2;\r\n\r\n    const x = Math.min(this.lasso.startX, this.lasso.endX);\r\n    const y = Math.min(this.lasso.startY, this.lasso.endY);\r\n    const w = Math.max(this.lasso.startX, this.lasso.endX) - x;\r\n    const h = Math.max(this.lasso.startY, this.lasso.endY) - y;\r\n\r\n    g.fillRect(x, y, w, h);\r\n    g.strokeRect(x, y, w, h);\r\n  }\r\n}\r\n","import {NoteSequencer} from './note-sequencer';\r\n\r\nif (customElements.get(NoteSequencer.tag) == null) {\r\n  customElements.define(NoteSequencer.tag, NoteSequencer);\r\n}","import {Component, ComponentBounds, ComponentMouseEvent, ComponentPosition} from './BaseComponent';\r\nimport {squaredDistance} from './RenderHelpers';\r\n\r\nconst CLICK_MAX_DISTANCE_SQUARED = 30;\r\nconst CLICK_INTERVAL = 200;\r\nconst DOUBLE_CLICK_INTERVAL = 500;\r\nconst DOUBLE_PRESS_INTERVAL = 400;\r\n\r\nexport class RootComponentHolder<T extends Component> {\r\n  public readonly canvas: HTMLCanvasElement;\r\n\r\n  private canvasMouseDownListener: (event: MouseEvent) => void;\r\n  private documentMouseUpListener: (event: MouseEvent) => void;\r\n  private documentMouseMoveListener: (event: MouseEvent) => void;\r\n\r\n  constructor(public readonly width: number, public readonly height: number, public readonly rootComponent: T) {\r\n    rootComponent.rootHolder = this;\r\n\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n\r\n    this.initMouseEventListeners();\r\n  }\r\n\r\n  public get renderingContext(): CanvasRenderingContext2D {\r\n    return this.canvas.getContext('2d');\r\n  }\r\n\r\n  public repaint(): void {\r\n    this.rootComponent.repaint();\r\n  }\r\n\r\n  public resize(width: number, height: number): void {\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n\r\n    this.rootComponent.setBounds(new ComponentBounds(0, 0, width, height));\r\n  }\r\n\r\n  public initMouseEventListeners(): void {\r\n    let pressedComponent: Component = null;\r\n    let componentUnderMouse: Component = null;\r\n    let mouseDownPos: ComponentPosition;\r\n    let mouseUpPos: ComponentPosition;\r\n    let mouseDownTime: number;\r\n    let mouseUpTime: number;\r\n    let consecutiveClickCount: number = 0;\r\n    let consecutivePressCount: number = 0;\r\n    let lastClickTime: number;\r\n    let lastClickPos: ComponentPosition;\r\n    let wasDragged: boolean = false;\r\n    let isDragging: boolean = false;\r\n\r\n    const mousePositionRelativeToCanvas = (event: MouseEvent) => {\r\n      const canvasBounds = this.canvas.getBoundingClientRect();\r\n      const x = event.clientX - canvasBounds.x;\r\n      const y = event.clientY - canvasBounds.y;\r\n      return {x, y};\r\n    };\r\n\r\n    const hit = (event: MouseEvent, action: (hit: Component) => void) => {\r\n      const mousePos = mousePositionRelativeToCanvas(event);\r\n      const hitComponent = this.rootComponent.findComponentAt(mousePos);\r\n\r\n      if (hitComponent != null) {\r\n        action(hitComponent);\r\n      }\r\n    };\r\n\r\n    this.canvasMouseDownListener = (mouseEvent) => hit(mouseEvent, (component) => {\r\n      pressedComponent = component;\r\n      mouseDownPos = mousePositionRelativeToCanvas(mouseEvent);\r\n      mouseDownTime = performance.now();\r\n      wasDragged = false;\r\n      isDragging = true;\r\n\r\n      component.mousePressed({\r\n        position: mouseDownPos,\r\n        positionAtMouseDown: mouseDownPos,\r\n        pressedComponent: component,\r\n        wasDragged,\r\n        modifiers: extractModifiers(mouseEvent),\r\n        isDragging,\r\n      });\r\n\r\n      if (lastClickPos == null\r\n        || lastClickTime == null\r\n        || mouseDownTime > lastClickTime + DOUBLE_PRESS_INTERVAL\r\n        || squaredDistance(lastClickPos.x, lastClickPos.y, mouseDownPos.x, mouseDownPos.y) > CLICK_MAX_DISTANCE_SQUARED) {\r\n        consecutivePressCount = 1;\r\n      } else {\r\n        consecutivePressCount++;\r\n      }\r\n\r\n      if (consecutivePressCount == 2) {\r\n        component.doublePressed({\r\n          position: mouseDownPos,\r\n          positionAtMouseDown: mouseDownPos,\r\n          pressedComponent: component,\r\n          wasDragged,\r\n          modifiers: extractModifiers(mouseEvent),\r\n          isDragging,\r\n        });\r\n\r\n        consecutivePressCount = 0;\r\n      }\r\n    });\r\n\r\n    this.documentMouseUpListener = (mouseEvent: MouseEvent) => {\r\n      mouseUpPos = mousePositionRelativeToCanvas(mouseEvent);\r\n      mouseUpTime = performance.now();\r\n\r\n      if (pressedComponent != null) {\r\n        pressedComponent.mouseReleased({\r\n          position: mouseUpPos,\r\n          positionAtMouseDown: mouseDownPos,\r\n          pressedComponent,\r\n          wasDragged,\r\n          modifiers: extractModifiers(mouseEvent),\r\n          isDragging,\r\n        });\r\n\r\n        if (mouseUpTime < mouseDownTime + CLICK_INTERVAL\r\n          && ! wasDragged) {\r\n          lastClickPos = mouseUpPos;\r\n\r\n          pressedComponent.clicked({\r\n            position: mouseUpPos,\r\n            positionAtMouseDown: mouseDownPos,\r\n            pressedComponent,\r\n            wasDragged,\r\n            modifiers: extractModifiers(mouseEvent),\r\n            isDragging,\r\n          });\r\n\r\n          if (lastClickTime == null || mouseUpTime > lastClickTime + DOUBLE_CLICK_INTERVAL) {\r\n            consecutiveClickCount = 1;\r\n          } else {\r\n            consecutiveClickCount++;\r\n          }\r\n\r\n          if (consecutiveClickCount == 2\r\n            && ! wasDragged) {\r\n            pressedComponent.doubleClicked({\r\n              position: mouseUpPos,\r\n              positionAtMouseDown: mouseDownPos,\r\n              pressedComponent,\r\n              wasDragged,\r\n              modifiers: extractModifiers(mouseEvent),\r\n              isDragging,\r\n            });\r\n\r\n            consecutiveClickCount = 0;\r\n          }\r\n        }\r\n\r\n        pressedComponent = null;\r\n        lastClickTime = performance.now();\r\n      }\r\n\r\n      wasDragged = false;\r\n      isDragging = false;\r\n    };\r\n\r\n    this.documentMouseMoveListener = (mouseEvent: MouseEvent) => {\r\n      const {x, y} = mousePositionRelativeToCanvas(mouseEvent);\r\n\r\n      if (! wasDragged\r\n        && mouseDownPos != null\r\n        && squaredDistance(mouseDownPos.x, mouseDownPos.y, x, y) > CLICK_MAX_DISTANCE_SQUARED) {\r\n        wasDragged = true;\r\n      }\r\n\r\n      hit(mouseEvent, (component) => {\r\n        document.body.style.cursor = component.mouseCursor || 'default';\r\n\r\n        if (componentUnderMouse != null && componentUnderMouse != component) {\r\n          const event: ComponentMouseEvent = {\r\n            position: {x, y},\r\n            positionAtMouseDown: mouseDownPos,\r\n            wasDragged,\r\n            modifiers: extractModifiers(mouseEvent),\r\n            pressedComponent,\r\n            isDragging,\r\n          };\r\n\r\n          componentUnderMouse.mouseExit({...event});\r\n          component.mouseEnter({...event});\r\n        }\r\n\r\n        componentUnderMouse = component;\r\n\r\n        component.mouseMoved({\r\n          position: { x, y },\r\n          positionAtMouseDown: mouseDownPos,\r\n          pressedComponent: component,\r\n          wasDragged,\r\n          modifiers: extractModifiers(mouseEvent),\r\n          isDragging,\r\n        });\r\n      });\r\n\r\n      if (mouseEvent.buttons > 0 && pressedComponent != null) {\r\n        document.body.style.cursor = pressedComponent.mouseCursor;\r\n\r\n        pressedComponent.mouseDragged({\r\n          position: { x, y },\r\n          positionAtMouseDown: mouseDownPos,\r\n          pressedComponent,\r\n          wasDragged,\r\n          modifiers: extractModifiers(mouseEvent),\r\n          isDragging,\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  public attachMouseEventListeners(): void {\r\n    this.canvas.addEventListener('mousedown', this.canvasMouseDownListener);\r\n    document.addEventListener('mouseup', this.documentMouseUpListener);\r\n    document.addEventListener('mousemove', this.documentMouseMoveListener);\r\n  }\r\n\r\n  public removeMouseEventListeners(): void {\r\n    this.canvas.removeEventListener('mousedown', this.canvasMouseDownListener);\r\n    document.removeEventListener('mouseup', this.documentMouseUpListener);\r\n    document.removeEventListener('mousemove', this.documentMouseMoveListener);\r\n  }\r\n}\r\n\r\nfunction extractModifiers(mouseEvent: MouseEvent): {shift: boolean, option: boolean} {\r\n  return {\r\n    shift: mouseEvent.shiftKey,\r\n    option: mouseEvent.ctrlKey,\r\n  }\r\n}\r\n","import {SequencerDisplayModel} from '../note-sequencer';\r\nimport {Component} from './BaseComponent';\r\nimport {DraggableBorder, DraggableBorderOwner} from './DraggableBorder';\r\nimport {NoteGridComponent} from './NoteGridComponent';\r\nimport {PitchRuler} from './PitchRuler';\r\nimport {TimeRuler} from './TimeRuler';\r\nimport {VelocityRuler} from './VelocityRuler';\r\nimport {VelocityTrack} from './VelocityTrack';\r\n\r\nexport class SequencerRoot extends Component implements DraggableBorderOwner {\r\n  private readonly _grid: NoteGridComponent;\r\n  private readonly _pitchRuler: PitchRuler;\r\n  private readonly _timeRuler: TimeRuler;\r\n  private readonly _velocityRuler: VelocityRuler;\r\n  private readonly _draggableBorder: DraggableBorder;\r\n  private readonly _velocityTrack: VelocityTrack;\r\n\r\n  private draggableBorderPosition: number;\r\n\r\n  constructor(public readonly model: SequencerDisplayModel) {\r\n    super();\r\n\r\n    this._grid = new NoteGridComponent(model);\r\n    this.addAndMakeVisible(this._grid);\r\n\r\n    this._pitchRuler = new PitchRuler(model, this._grid);\r\n    this.addAndMakeVisible(this._pitchRuler);\r\n\r\n    this._timeRuler = new TimeRuler(model, this._grid);\r\n    this.addAndMakeVisible(this._timeRuler);\r\n\r\n    this._velocityRuler = new VelocityRuler(model);\r\n    this.addAndMakeVisible(this._velocityRuler);\r\n\r\n    this._draggableBorder = new DraggableBorder(model, this);\r\n    this.addAndMakeVisible(this._draggableBorder);\r\n\r\n    this._velocityTrack = new VelocityTrack(model, this._grid);\r\n    this.addAndMakeVisible(this._velocityTrack);\r\n  }\r\n\r\n  public resized(): void {\r\n    if (this.draggableBorderPosition == null) {\r\n      this.draggableBorderPosition = this.height - 80;\r\n    }\r\n\r\n    const rulerWidth = 40;\r\n    const rulerHeight = 40;\r\n    const velocityHeight = this.height - this.draggableBorderPosition;\r\n    const borderHeight = 4;\r\n\r\n    const bounds = this.getLocalBounds();\r\n\r\n    const velocityBounds = bounds.removeFromBottom(velocityHeight);\r\n    this._velocityRuler.setBounds(velocityBounds.removeFromLeft(rulerWidth));\r\n    this._velocityTrack.setBounds(velocityBounds);\r\n\r\n    this._draggableBorder.setBounds(bounds.removeFromBottom(borderHeight));\r\n\r\n    const hRulerBounds = bounds.removeFromTop(rulerHeight);\r\n    hRulerBounds.removeFromLeft(rulerWidth);\r\n    this._timeRuler.setBounds(hRulerBounds);\r\n\r\n    this._pitchRuler.setBounds(bounds.removeFromLeft(rulerWidth));\r\n\r\n    this._grid.setBounds(bounds);\r\n\r\n    this.repaint();\r\n  }\r\n\r\n  public render(g: CanvasRenderingContext2D): void {\r\n    g.fillStyle = this.model.colors.background;\r\n    g.fillRect(0, 0, this.width, this.height);\r\n  }\r\n\r\n  public borderDragged(newPosition: number): void {\r\n    this.draggableBorderPosition = Math.max(80, Math.min(newPosition - this.getPosition().y, this.height));\r\n\r\n    const snapThreshold = 50;\r\n\r\n    if (this.draggableBorderPosition > this.height - snapThreshold) {\r\n      this.draggableBorderPosition = this.draggableBorderPosition > this.height - snapThreshold / 2 ?\r\n        this.height : this.height - snapThreshold;\r\n    }\r\n\r\n    this.resized();\r\n  }\r\n\r\n  public setTimeStart(numberValue: number): number {\r\n    const newValue = Math.max(0, numberValue);\r\n\r\n    const offset = newValue - this.model.maxTimeRange.start;\r\n\r\n    if (offset === 0) {\r\n      return 0;\r\n    }\r\n\r\n    this.model.maxTimeRange.start += offset;\r\n    this.model.maxTimeRange.end += offset;\r\n\r\n    // Adapt visible range by translating to the left or to the right if needed\r\n\r\n    const leftExcess = this.model.maxTimeRange.start - this.model.visibleTimeRange.start;\r\n\r\n    if (leftExcess > 0) {\r\n      this.model.visibleTimeRange.start += leftExcess;\r\n      this.model.visibleTimeRange.end += leftExcess;\r\n    }\r\n\r\n    const rightExcess = this.model.maxTimeRange.end - this.model.visibleTimeRange.end;\r\n\r\n    if (rightExcess < 0) {\r\n      this.model.visibleTimeRange.start += rightExcess;\r\n      this.model.visibleTimeRange.end += rightExcess;\r\n    }\r\n\r\n    this.repaint();\r\n\r\n    return newValue;\r\n  }\r\n\r\n  public setDuration(numberValue: number): number {\r\n    numberValue = Math.max(0, numberValue);\r\n\r\n    this.model.maxTimeRange.end = this.model.maxTimeRange.start + numberValue;\r\n    this.model.visibleTimeRange.end = Math.min(this.model.visibleTimeRange.end, this.model.maxTimeRange.end);\r\n    this.repaint();\r\n\r\n    return numberValue;\r\n  }\r\n}","import {SequencerDisplayModel} from '../note-sequencer';\r\nimport {Component, ComponentMouseEvent} from './BaseComponent';\r\n\r\nexport interface DraggableBorderOwner {\r\n  borderDragged(position: number): void;\r\n}\r\n\r\nexport class DraggableBorder extends Component {\r\n\r\n  private initialPosition: number;\r\n\r\n  constructor(private readonly model: SequencerDisplayModel, private readonly owner: DraggableBorderOwner) {\r\n    super();\r\n    this.mouseCursor = 'ns-resize';\r\n  }\r\n\r\n  public mousePressed(event: ComponentMouseEvent): void {\r\n    this.initialPosition = event.position.y;\r\n  }\r\n\r\n  public mouseDragged(event: ComponentMouseEvent): void {\r\n    const newPosition = this.initialPosition + (event.position.y - event.positionAtMouseDown.y);\r\n    this.owner.borderDragged(newPosition);\r\n  }\r\n\r\n  public mouseEnter(event: ComponentMouseEvent): void {\r\n    super.mouseEnter(event);\r\n    this.repaint();\r\n  }\r\n\r\n  public mouseExit(event: ComponentMouseEvent): void {\r\n    super.mouseExit(event);\r\n    this.repaint();\r\n  }\r\n\r\n  protected render(g: CanvasRenderingContext2D): void {\r\n    g.fillStyle = this.hovered ? this.model.colors.draggableBorderHover : this.model.colors.draggableBorder;\r\n    g.fillRect (0, 0, this.width, this.height);\r\n  }\r\n\r\n  protected resized(): void {\r\n  }\r\n\r\n}","import {MAX_PITCH, MAX_VELOCITY, MIN_SEMI_H, PITCH_PATTERN, SequencerDisplayModel} from '../note-sequencer'\r\nimport {Component, ComponentBounds, ComponentMouseEvent, ComponentPosition} from './BaseComponent';\r\nimport {LassoSelector} from './LassoSelector';\r\nimport {drawNote, drawTimeBackground} from './RenderHelpers';\r\nimport {SelectedItemSet} from './SelectedItemSet';\r\n\r\nexport interface Note {\r\n  time: number,\r\n  pitch: number,\r\n  duration: number,\r\n  velocity: number,\r\n\r\n  tempDuration: number,\r\n  hidden: boolean,\r\n  selected: boolean,\r\n\r\n  initialStart: number;\r\n  initialVelocity: number;\r\n}\r\n\r\ninterface NotePosition {\r\n  time: number,\r\n  pitch: number,\r\n}\r\n\r\ntype DragAction = 'V_RIGHT' | 'MOVE_NOTE' | 'RIGHT' | 'LEFT' | 'NONE';\r\n\r\nexport class NoteGridComponent extends Component {\r\n\r\n  // TODO: move into model or utility\r\n  public readonly adaptiveLabels: string[] = ['XL', 'X', 'M', 'S', 'XS'];\r\n  public readonly adaptiveRatios: number[] = [1, .5, .25, .1, .05];\r\n  public adaptiveIndex: number = 3;\r\n  public fixedIncrements: number[] = [128, 64, 32, 16, 8, 4, 2, 1, 0.5];\r\n  public fixedIndex: number = 5;\r\n\r\n  private _notes: Note[] = [];\r\n  private readonly _selectedSet: SelectedItemSet<Note>;\r\n  private readonly _lasso: LassoSelector<Note>;\r\n\r\n  // Mouse interaction state\r\n  private _dragAction: DragAction;\r\n  private _mouseDownResult: boolean = false;\r\n  private _currentVelocity: number = MAX_VELOCITY;\r\n  private _draggedItem: Note;\r\n  private _initialDuration: number = null;\r\n  private _initialStart: number = null;\r\n  private _initialVelocity: number = null;\r\n  private _initialPosition: NotePosition = null;\r\n  private _minStartOffset: number = null;\r\n  private _maxDurationOffset: number = null;\r\n  private _minDragOffset: NotePosition = null;\r\n  private _maxDragOffset: NotePosition = null;\r\n\r\n  constructor(private readonly model: SequencerDisplayModel) {\r\n    super();\r\n\r\n    this._selectedSet = new SelectedItemSet<Note>();\r\n\r\n    this._lasso = new LassoSelector<Note>(this, this._selectedSet, this.model.colors);\r\n\r\n    this._lasso.findAllElementsInLasso = (lassoBounds: ComponentBounds) => {\r\n      return this._notes.filter((note) => {\r\n        const noteBounds = {\r\n          x: this.getPositionForTime (note.time),\r\n          y: this.getPositionForPitch (note.pitch),\r\n          width: Math.max (2, note.duration * this.getSixteenthWidth()),\r\n          height: this.getSemitoneHeight(),\r\n        };\r\n\r\n        return Component.boundsIntersect(noteBounds, lassoBounds);\r\n      });\r\n    }\r\n  }\r\n\r\n  public get notes(): Note[] {\r\n    return this._notes;\r\n  }\r\n\r\n  public get selectedSet(): SelectedItemSet<Note> {\r\n    return this._selectedSet;\r\n  }\r\n\r\n  public render(g: CanvasRenderingContext2D): void {\r\n    // Background\r\n    g.fillStyle = this.model.colors.background;\r\n    g.fillRect(0, 0, this.width, this.height);\r\n\r\n    // Horizontal\r\n    const hMin = this.model.visibleTimeRange.start;\r\n    const hMax = this.model.visibleTimeRange.end;\r\n    const sixteenth = this.getSixteenthWidth();\r\n\r\n    this.drawHorizontalBackground(g, sixteenth, hMin, hMax);\r\n\r\n    // Vertical\r\n    const start = this.model.verticalRange.start;\r\n    const end = this.model.verticalRange.end;\r\n    const semiHeight = this.getSemitoneHeight();\r\n\r\n    if (semiHeight > MIN_SEMI_H) {\r\n      this.drawSemiTonePattern(g, start, end, semiHeight);\r\n    } else {\r\n      this.drawOctaveLines(g, start, end, semiHeight);\r\n    }\r\n\r\n    this._lasso.drawLasso(g);\r\n\r\n    this.drawNotes(g, semiHeight, sixteenth);\r\n  }\r\n\r\n  public resized(): void {\r\n    this.repaint();\r\n  }\r\n\r\n  //===============================================================================\r\n  // Note management\r\n  public removeNote(note: Note, repaint: boolean = true): void {\r\n    this._selectedSet.removeFromSelection(note);\r\n    this._notes = this._notes.filter(n => n !== note);\r\n\r\n    if (repaint) {\r\n      this.getParentComponent().repaint();\r\n    }\r\n  }\r\n\r\n  public moveNoteToFront(note: Note): void {\r\n    const idx = this._notes.indexOf(note);\r\n\r\n    if (idx >= 0) {\r\n      this._notes.splice(idx, 1);\r\n      this._notes.push(note);\r\n      this.getParentComponent().repaint();\r\n    }\r\n  }\r\n\r\n  public deleteSelection(): void {\r\n    const selected = this._selectedSet.getItems();\r\n\r\n    for (let i = selected.length; --i >= 0;)\r\n      this.removeNote(selected[i], false);\r\n\r\n    this.getParentComponent().repaint();\r\n  }\r\n\r\n  //===============================================================================\r\n\r\n  public getSixteenthWidth(): number {\r\n    return this.width / (this.model.visibleTimeRange.end - this.model.visibleTimeRange.start);\r\n  }\r\n\r\n  public getTimeAt(pos: number): number {\r\n    const start = this.model.visibleTimeRange.start;\r\n    const sixteenth = this.getSixteenthWidth();\r\n    const x = this.getPosition().x;\r\n\r\n    pos -= x;                   // Local pos\r\n    pos += start * sixteenth;    // visible area offset\r\n\r\n    return (pos / sixteenth);\r\n  }\r\n\r\n  public getPitchAt(pos: number): number {\r\n    const start = this.model.verticalRange.start;\r\n    const semi = this.getSemitoneHeight();\r\n    const y = this.getPosition().y;\r\n\r\n    pos -= y;                             // Local position\r\n    pos -= start * semi;                  // offset for visible area\r\n    pos = this.height - pos;              // Inversion\r\n    pos += semi * 0.5;                    // offset to have the 'note' centred\r\n    return Math.round(pos / semi);     // Scaling\r\n  }\r\n\r\n  public getPositionForTime(time: number): number {\r\n    const start = this.model.visibleTimeRange.start;\r\n    const end = this.model.visibleTimeRange.end;\r\n    const vRange = end - start;\r\n    const sixteenth = this.width / vRange;\r\n\r\n    return (time - start) * sixteenth;\r\n  }\r\n\r\n  public getPositionForPitch(pitch: number): number {\r\n    const semiHeight = this.getSemitoneHeight();\r\n    return this.height - (pitch - this.model.verticalRange.start) * semiHeight;\r\n  }\r\n\r\n  public getSemitoneHeight(): number {\r\n    return this.height / (this.model.verticalRange.end - this.model.verticalRange.start);\r\n  }\r\n  \r\n  //===============================================================================\r\n  // Mouse event handlers\r\n\r\n  public doublePressed(event: ComponentMouseEvent): void {\r\n    const pos = this.getPosition();\r\n\r\n    const local = {\r\n      x: event.position.x - pos.x,\r\n      y: event.position.y - pos.y,\r\n    };\r\n\r\n    const existingNote = this.findNoteAt(local);\r\n\r\n    if (existingNote != null) {\r\n      this.removeNote (existingNote);\r\n      return;\r\n    }\r\n\r\n    const t = this.snapToGrid (this.getTimeAt (event.position.x));\r\n    const p = Math.round (this.getPitchAt(event.position.y));\r\n    const d = this.getTimeIncrement();\r\n\r\n    const newNote: Note = {\r\n      time: t,\r\n      pitch: p,\r\n      duration: d,\r\n      velocity: this._currentVelocity,\r\n      hidden: false,\r\n      selected: true,\r\n      tempDuration: 0,\r\n      initialStart: t,\r\n      initialVelocity: this._currentVelocity,\r\n    };\r\n\r\n    this._notes.push(newNote);\r\n    this._selectedSet.setUniqueSelection(newNote);\r\n\r\n    this.removeOverlaps(true);\r\n\r\n    // We start dragging the end point of this note and its velocity\r\n    this._dragAction = 'V_RIGHT';\r\n    this._draggedItem = newNote;\r\n\r\n    // Trigger callback method\r\n    // TODO\r\n    // this.onNoteAdded(newNote);\r\n\r\n    this.getParentComponent().repaint();\r\n\r\n    this.mouseCursor = \"w-resize\";\r\n  }\r\n\r\n  public mouseMoved(event: ComponentMouseEvent): void {\r\n    super.mouseMoved(event);\r\n\r\n    if (event.isDragging)\r\n      return;\r\n\r\n    const pos = this.getPosition();\r\n\r\n    const local = {\r\n      x: event.position.x - pos.x,\r\n      y: event.position.y - pos.y,\r\n    };\r\n\r\n    const existingNote = this.findNoteAt(local);\r\n\r\n    if (existingNote == null) {\r\n      this.mouseCursor = \"default\";\r\n      return;\r\n    }\r\n\r\n    const action = this.getDragActionForNoteAt(local, existingNote);\r\n\r\n    if (action == 'MOVE_NOTE') {\r\n      this.mouseCursor = \"move\";\r\n    } else if (action == \"LEFT\") {\r\n      this.mouseCursor = \"w-resize\";\r\n    } else if (action == \"RIGHT\") {\r\n      this.mouseCursor = \"e-resize\";\r\n    } else {\r\n      this.mouseCursor = \"default\";\r\n    }\r\n  }\r\n\r\n  public mousePressed(event: ComponentMouseEvent): void {\r\n    const pos = this.getPosition();\r\n\r\n    const local = {\r\n      x: event.position.x - pos.x,\r\n      y: event.position.y - pos.y,\r\n    };\r\n\r\n    const existingNote = this.findNoteAt(local);\r\n\r\n    if (existingNote == null) {\r\n      if (! event.modifiers.shift) {\r\n        this._selectedSet.deselectAll();\r\n      }\r\n\r\n      this._lasso.beginLasso(event);\r\n\r\n      this._mouseDownResult = true;\r\n\r\n      return;\r\n    }\r\n\r\n    this._mouseDownResult = this._selectedSet.addToSelectionMouseDown(existingNote, event.modifiers.shift);\r\n    this._dragAction = this.getDragActionForNoteAt (local, existingNote);\r\n    this.setMouseCursor(this._dragAction);\r\n\r\n    this._draggedItem = existingNote;\r\n    this.moveNoteToFront (existingNote);\r\n  }\r\n\r\n  public mouseReleased(event: ComponentMouseEvent): void {\r\n    this._dragAction = 'NONE';\r\n    this.setMouseCursor(this._dragAction);\r\n\r\n    this._initialPosition = null;\r\n    this._initialDuration = null;\r\n    this._initialStart = null;\r\n    this._initialVelocity = null;\r\n\r\n    this._lasso.endLasso();\r\n\r\n    // in case a drag would have caused negative durations\r\n    for (const selected of this._selectedSet.getItems()) {\r\n      selected.duration = Math.max (0, selected.duration);\r\n    }\r\n\r\n    this._selectedSet.addToSelectionMouseUp(event.wasDragged, event.modifiers.shift, this._mouseDownResult);\r\n\r\n    this.removeOverlaps (true);\r\n\r\n    this._notes.forEach((note) => {\r\n      note.initialVelocity = note.velocity;\r\n    });\r\n\r\n    this._draggedItem = null;\r\n\r\n  }\r\n\r\n  public mouseDragged(event: ComponentMouseEvent): void {\r\n    if (this._dragAction == \"NONE\") {\r\n      this._lasso.dragLasso(event);\r\n    }\r\n\r\n    if (! event.wasDragged || this._dragAction == \"NONE\") {\r\n      this.getParentComponent().repaint();\r\n      return;\r\n    }\r\n\r\n    if (this._dragAction == \"MOVE_NOTE\") {\r\n      this.moveSelection(event);\r\n    } else if (this._dragAction == \"RIGHT\" || this._dragAction == \"V_RIGHT\") {\r\n      this.dragEndPoints(event);\r\n    } else if (this._dragAction == \"LEFT\") {\r\n      this.dragStartPoints(event);\r\n    }\r\n\r\n    if (this._dragAction == \"V_RIGHT\") {\r\n      this.dragVelocity(event);\r\n    }\r\n\r\n    this.removeOverlaps (false);\r\n\r\n    this.getParentComponent().repaint();\r\n  }\r\n\r\n  //===============================================================================\r\n\r\n  public getTimeAsMBS(t: number): number[] {\r\n    const denominator = (16 / this.model.signature.lower);\r\n    let b = Math.floor(t / denominator);\r\n\r\n    const s = t - (b * denominator);\r\n    const m = Math.floor(b / this.model.signature.upper);\r\n    b -= (m * this.model.signature.upper);\r\n\r\n    return [m, b, s];\r\n  }\r\n\r\n  public getStringForTime(time: number, withOriginOne: boolean): string {\r\n    const mbs = this.getTimeAsMBS(time);\r\n    let m = mbs[0];\r\n    let b = mbs[1];\r\n    let s = mbs[2];\r\n\r\n    if (withOriginOne) {\r\n      m++;\r\n      b++;\r\n      s++;\r\n    }\r\n\r\n    const useSixteenth = s != 1;\r\n    const useBeats = useSixteenth || b != 1;\r\n\r\n    return m + (useBeats ? '.' + b : '') + (useSixteenth ? '.' + Math.floor(s) : '');\r\n  }\r\n\r\n  public getTimeIncrement(): number {\r\n    const sixteenth = this.getSixteenthWidth();\r\n    let ratio: number;\r\n\r\n    if (sixteenth < 0.00001) {\r\n      return null;\r\n    }\r\n\r\n    if (this.model.adaptiveMode) {\r\n      const desiredSpacing = this.adaptiveRatios[this.adaptiveIndex] * this.width;\r\n\r\n      ratio = (16 * this.model.signature.upper) / this.model.signature.lower;\r\n\r\n      if (ratio * sixteenth > desiredSpacing) {\r\n        ratio /= this.model.signature.upper;\r\n\r\n        while (sixteenth * ratio > desiredSpacing)\r\n          ratio /= 2;\r\n      } else {\r\n        while (sixteenth * ratio * 2 < desiredSpacing)\r\n          ratio *= 2;\r\n      }\r\n    } else {\r\n      ratio = this.fixedIncrements[this.fixedIndex];\r\n    }\r\n\r\n    return ratio;\r\n  }\r\n\r\n  //===============================================================================\r\n\r\n  public moveSelection(event: ComponentMouseEvent): void {\r\n    if (this._draggedItem == null || this._selectedSet.getItems().length == 0)\r\n      return;\r\n\r\n    const currentPosition = {\r\n      time: this._draggedItem.time,\r\n      pitch: this._draggedItem.pitch,\r\n    };\r\n\r\n    if (this._initialPosition == null) {\r\n      // We're starting a new drag\r\n      this._initialPosition = currentPosition;\r\n\r\n      // Find bounding box for selection\r\n      let selectionLeft: number = Infinity;\r\n      let selectionRight: number = -Infinity;\r\n      let selectionTop: number = Infinity;\r\n      let selectionBottom: number = -Infinity;\r\n\r\n      this._selectedSet.getItems().forEach((note) => {\r\n        if (selectionLeft == null || note.time < selectionLeft) {\r\n          selectionLeft = note.time;\r\n        }\r\n\r\n        if (selectionRight == null || note.time + note.duration > selectionRight) {\r\n          selectionRight = note.time + note.duration;\r\n        }\r\n\r\n        if (selectionTop == null || note.pitch - 1 < selectionTop) {\r\n          selectionTop = note.pitch - 1;\r\n        }\r\n\r\n        if (selectionBottom == null || note.pitch > selectionBottom) {\r\n          selectionBottom = note.pitch;\r\n        }\r\n      });\r\n\r\n      // Deduce constraints for this box\r\n      this._minDragOffset = {\r\n        time: -selectionLeft,\r\n        pitch: -selectionTop,\r\n      };\r\n\r\n      this._maxDragOffset = {\r\n        time: this.model.maxTimeRange.end - selectionRight,\r\n        pitch: MAX_PITCH - selectionBottom,\r\n      };\r\n    }\r\n\r\n    const dragOffset = {\r\n      x: event.position.x - event.positionAtMouseDown.x,\r\n      y: event.position.y - event.positionAtMouseDown.y,\r\n    };\r\n\r\n    const scaledX = Math.max(this._minDragOffset.time,\r\n      Math.min(dragOffset.x / this.getSixteenthWidth(),\r\n        this._maxDragOffset.time));\r\n\r\n    const scaledY = Math.max(this._minDragOffset.pitch,\r\n      Math.min(- dragOffset.y / this.getSemitoneHeight(),\r\n        this._maxDragOffset.pitch));\r\n\r\n    // Apply translate to itemDragged\r\n    this._draggedItem.pitch = Math.round(this._initialPosition.pitch + scaledY);\r\n    this._draggedItem.time = this._initialPosition.time + scaledX;\r\n\r\n    // Snap to grid\r\n    if (! event.modifiers.option) {\r\n      this._draggedItem.time = this.snapToGrid(this._draggedItem.time);\r\n    }\r\n\r\n    // Now we determine the actual offset for all elements\r\n    const gridOffsetX = this._draggedItem.time - currentPosition.time;\r\n    const gridOffsetY = this._draggedItem.pitch - currentPosition.pitch;\r\n\r\n    for (const s of this._selectedSet.getItems()) {\r\n      // Ignore itemDragged which has already been moved\r\n      if (s === this._draggedItem)\r\n        continue;\r\n\r\n      s.pitch += gridOffsetY;\r\n      s.time += gridOffsetX;\r\n    }\r\n  }\r\n\r\n  private dragEndPoints(event: ComponentMouseEvent): void {\r\n    if (this._draggedItem === null)\r\n      return;\r\n\r\n    const currentDuration = this._draggedItem.duration;\r\n\r\n    if (this._initialDuration == null) {\r\n      this._initialDuration = currentDuration;\r\n\r\n      let selectionRight: number = null;\r\n      this._selectedSet.getItems().forEach((note) => {\r\n        if (selectionRight == null || note.time + note.duration > selectionRight) {\r\n          selectionRight = note.time + note.duration;\r\n        }\r\n      });\r\n\r\n      this._maxDurationOffset = this.model.maxTimeRange.end - selectionRight;\r\n    }\r\n\r\n    const dragOffset = event.position.x - event.positionAtMouseDown.x;\r\n    const scaledX = Math.min(this._maxDurationOffset, dragOffset / this.getSixteenthWidth());\r\n\r\n    // Apply to itemDragged\r\n    this._draggedItem.duration = this._initialDuration + scaledX;\r\n\r\n    // snap to grid\r\n    if (! event.modifiers.option) {\r\n      const snappedEndPoint = this.snapToGrid(this._draggedItem.time + this._draggedItem.duration);\r\n      this._draggedItem.duration = snappedEndPoint - this._draggedItem.time;\r\n      this._draggedItem.duration = Math.max (0, this._draggedItem.duration);\r\n    }\r\n\r\n    // Now we determine the actual offset\r\n    const gridOffsetX = this._draggedItem.duration - currentDuration;\r\n\r\n    for (const s of this._selectedSet.getItems()) {\r\n      // Ignore itemDragged which has already been moved\r\n      if (s === this._draggedItem)\r\n        continue;\r\n\r\n      // We temporarily allow negative values... will be clipped in mouseReleased\r\n      s.duration += gridOffsetX;\r\n    }\r\n  }\r\n\r\n  private dragStartPoints(event: ComponentMouseEvent): void {\r\n    if (this._draggedItem == null)\r\n      return;\r\n\r\n    const currentStart = this._draggedItem.time;\r\n    const currentDuration = this._draggedItem.duration;\r\n\r\n    // On first call of a drag action\r\n    if (this._initialStart === null) {\r\n      this._initialStart = currentStart;\r\n      this._initialDuration = currentDuration;\r\n\r\n      for (const s of this._selectedSet.getItems()) {\r\n        s.initialStart = s.time;\r\n      }\r\n\r\n      let selectionLeft: number = null;\r\n\r\n      this._selectedSet.getItems().forEach((note) => {\r\n        if (selectionLeft == null || note.time < selectionLeft) {\r\n          selectionLeft = note.time;\r\n        }\r\n      });\r\n\r\n      this._minStartOffset = -selectionLeft;\r\n    }\r\n\r\n    const dragOffset = event.position.x - event.positionAtMouseDown.x;\r\n    const scaledX = Math.max(this._minStartOffset, dragOffset / this.getSixteenthWidth());\r\n    const currentEndPoint = this._draggedItem.time + this._draggedItem.duration;\r\n\r\n    // Apply to itemDragged\r\n    this._draggedItem.time = Math.min (currentEndPoint, this._initialStart + scaledX);\r\n    this._draggedItem.duration = Math.max (0, this._initialDuration - scaledX);\r\n\r\n    // snap to grid\r\n    if (!event.modifiers.option && this._draggedItem.duration > 0) {\r\n      this._draggedItem.time = this.snapToGrid(this._draggedItem.time);\r\n      this._draggedItem.duration = Math.max(0, this._initialDuration - (this._draggedItem.time - this._initialStart));\r\n    }\r\n\r\n    // Now we determine the actual offset since beginning of drag\r\n    const startOffset = this._draggedItem.time - this._initialStart;\r\n\r\n    for (const s of this._selectedSet.getItems()) {\r\n      // Ignore itemDragged which has already been moved\r\n      if (s === this._draggedItem)\r\n        continue;\r\n\r\n      const endPoint = s.time + s.duration;\r\n\r\n      s.time = s.initialStart + startOffset;\r\n      s.time = Math.min (s.time, endPoint);\r\n      s.duration = Math.max (0, endPoint - s.time)\r\n    }\r\n  }\r\n\r\n  private dragVelocity(event: ComponentMouseEvent): void {\r\n    // Can only apply to itemDragged\r\n    if (this._draggedItem == null) {\r\n      return;\r\n    }\r\n\r\n    if (this._initialVelocity == null) {\r\n      this._initialVelocity = this._draggedItem.velocity;\r\n    }\r\n\r\n    const dragOffset = event.position.y - event.positionAtMouseDown.y;\r\n\r\n    this._draggedItem.velocity = this._initialVelocity - dragOffset;\r\n    this._draggedItem.velocity = Math.max (0, Math.min (this._draggedItem.velocity, 127));\r\n\r\n    this._currentVelocity = this._draggedItem.velocity;\r\n  }\r\n\r\n  //===============================================================================\r\n  // Rendering\r\n  private drawHorizontalBackground(g: CanvasRenderingContext2D, sixteenth: number, start: number, end: number): void {\r\n    const incr = this.getTimeIncrement();\r\n\r\n    if (incr <= 0)\r\n      return;\r\n\r\n    drawTimeBackground(g, this.height, sixteenth, incr, start, end, this.model.signature, this.model.colors);\r\n  }\r\n\r\n  private drawNotes(g: CanvasRenderingContext2D, semiHeight: number, sixteenth: number): void {\r\n    for (const n of this._notes) {\r\n      if (n.hidden) {\r\n        continue;\r\n      }\r\n\r\n      const x = this.getPositionForTime(n.time);\r\n      const y = this.getPositionForPitch(n.pitch);\r\n      const d = n.tempDuration != null ? n.tempDuration : n.duration;\r\n      const w = Math.max(2, d * sixteenth);\r\n\r\n      drawNote(g, x, y, w, semiHeight, n.velocity, n.selected, this.model.colors);\r\n    }\r\n  }\r\n\r\n  private drawOctaveLines(g: CanvasRenderingContext2D, start: number, end: number, semiHeight: number): void {\r\n    g.fillStyle = this.model.colors.strokeDark;\r\n\r\n    for (let i = 0; i < 128; i += 12) {\r\n      if (i >= start && i <= end) {\r\n        const y = this.height - (i - start) * semiHeight;\r\n        g.fillRect(0, y, this.width, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  private drawSemiTonePattern(g: CanvasRenderingContext2D, start: number, end: number, semiHeight: number): void {\r\n    const yOffset = (start - Math.floor(start)) * semiHeight;\r\n\r\n    for (let i = Math.floor(start); i < Math.ceil(end); ++i) {\r\n      const y = this.height - (i - Math.floor(start)) * semiHeight;\r\n      const pitchClass = i % 12;\r\n\r\n      const viewportY = yOffset + y - semiHeight;\r\n\r\n      // Black key\r\n      g.fillStyle = this.model.colors.backgroundBlackKey;\r\n\r\n      if (PITCH_PATTERN[pitchClass]) {\r\n        g.fillRect(0, viewportY, this.width, semiHeight);\r\n      }\r\n\r\n      // Line separation\r\n      g.fillStyle = this.model.colors.strokeLight;\r\n      g.fillRect(0, viewportY, this.width, 1);\r\n    }\r\n  }\r\n\r\n  private removeOverlaps(apply: boolean): void {\r\n    // These are temp attributes to show truncated/removed notes\r\n    // without actually performing the action on notes\r\n    // They are used here when apply is false and in drawNotes()\r\n    for (const note of this._notes) {\r\n      note.tempDuration = null;\r\n      note.hidden = null;\r\n    }\r\n\r\n    for (const selected of this._selectedSet.getItems()) {\r\n      for (const note of this._notes) {\r\n        if (selected == note)\r\n          continue;\r\n\r\n        if (selected.pitch != note.pitch)\r\n          continue;\r\n\r\n        // If selected precedes note\r\n        if (selected.time <= note.time) {\r\n          // If selected overlaps over note\r\n          if (note.time < selected.time + selected.duration) {\r\n            // If note is also selected, we won't remove it\r\n            if (! note.selected) {\r\n              if (apply)\r\n                this.removeNote (note);\r\n              else\r\n                note.hidden = true;\r\n            }\r\n          }\r\n          // If note precedes selected\r\n        } else {\r\n          // If selected overlaps over note, shorten note\r\n          if (selected.time < note.time + note.duration) {\r\n            if (apply)  note.duration = selected.time - note.time;\r\n            else        note.tempDuration = selected.time - note.time;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.getParentComponent().repaint();\r\n  }\r\n\r\n  private getDragActionForNoteAt(pos: ComponentPosition, n: Note): DragAction {\r\n    const margin = 2;\r\n    const noteX = this.getPositionForTime (n.time);\r\n    const noteW = Math.max (2, n.duration * this.getSixteenthWidth());\r\n    const localPos = pos.x - noteX;\r\n\r\n    if (localPos > noteW) return \"NONE\";\r\n    if (localPos >= noteW - margin) return \"RIGHT\";\r\n    if (localPos >= margin) return \"MOVE_NOTE\";\r\n    if (localPos >= 0) return \"LEFT\";\r\n    return \"NONE\";\r\n  }\r\n\r\n  private findNoteAt(pos: ComponentPosition): Note {\r\n    // We need to iterate from end to start to have front most notes first\r\n    for (const note of this.notes) {\r\n      const x = this.getPositionForTime (note.time);\r\n      const y = this.getPositionForPitch (note.pitch);\r\n      const w = Math.max (2, note.duration * this.getSixteenthWidth());\r\n      const h = this.getSemitoneHeight();\r\n\r\n      if (pos.x >= x && pos.x <= x + w && pos.y >= y && pos.y <= y + h) {\r\n        return note;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private snapToGrid(time: number): number {\r\n    const ratio = this.getTimeIncrement();\r\n\r\n    if (ratio > 0) {\r\n      return ratio * Math.floor(time / ratio);\r\n    }\r\n\r\n    return time * this.getSixteenthWidth();\r\n  }\r\n\r\n  private setMouseCursor(action: DragAction): void {\r\n    switch (action) {\r\n      case \"MOVE_NOTE\":\r\n        this.mouseCursor = 'move';\r\n        break;\r\n      case \"LEFT\":\r\n        this.mouseCursor = 'w-resize';\r\n        break;\r\n      case \"RIGHT\":\r\n        this.mouseCursor = 'e-resize';\r\n        break;\r\n      default:\r\n        this.mouseCursor = 'default';\r\n    }\r\n  }\r\n}\r\n","export interface SelectableItem {\r\n  selected: boolean;\r\n}\r\n\r\nexport class SelectedItemSet<T extends SelectableItem> {\r\n\r\n  private _selection: T[] = [];\r\n  private _itemAboutToBeSelected: T = null;\r\n\r\n  public onchange: Function = () => {};\r\n\r\n  public getItems(): T[] { return this._selection; }\r\n\r\n  public addToSelection(item: T, deselectAll: boolean = false): void {\r\n    if (deselectAll) {\r\n      this.deselectAll();\r\n    }\r\n\r\n    this._selection.push (item);\r\n    item.selected = true;\r\n  }\r\n\r\n  public addToSelectionMouseDown(item: T, isShiftKeyDown: boolean): boolean {\r\n    if (this._selection.includes(item)) {\r\n      // The item is already selected\r\n      if (isShiftKeyDown) {\r\n        this.removeFromSelection (item);\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n\r\n    } else {\r\n      if (! isShiftKeyDown) {\r\n        this.deselectAll();\r\n      }\r\n\r\n      this.doAddToSelection(item, true);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  public addToSelectionMouseUp(wasMouseDragged: boolean, isShiftKeyDown: boolean, actionConsumedOnMouseDown: boolean): void {\r\n    if (this._itemAboutToBeSelected == null\r\n      || wasMouseDragged\r\n      || actionConsumedOnMouseDown\r\n      || this._selection.includes(this._itemAboutToBeSelected))\r\n      return;\r\n\r\n    if (! isShiftKeyDown) {\r\n      this.deselectAll();\r\n    }\r\n\r\n    this.doAddToSelection(this._itemAboutToBeSelected, true);\r\n\r\n    this._itemAboutToBeSelected = null;\r\n  }\r\n\r\n  public setUniqueSelection(item: T): void {\r\n    this.deselectAll();\r\n    this.doAddToSelection(item, true);\r\n  }\r\n\r\n  public removeFromSelection(item: T): void {\r\n    this._selection = this._selection.filter((selected) => selected !== item);\r\n    item.selected = false;\r\n    this.onchange();\r\n  }\r\n\r\n  public deselectAll(): void {\r\n    this._selection.forEach(item => item.selected = false);\r\n    this._selection = [];\r\n    this.onchange();\r\n  }\r\n\r\n  private doAddToSelection(item: T, notify: boolean): void {\r\n    this._selection.push (item);\r\n    item.selected = true;\r\n\r\n    if (notify) {\r\n      this.onchange();\r\n    }\r\n  }\r\n}","import {MAX_PITCH, MAX_SEMI_H, MIN_PITCH, MIN_SEMI_H, PITCH_PATTERN, SequencerDisplayModel} from '../note-sequencer';\r\nimport {Component, ComponentMouseEvent} from './BaseComponent';\r\nimport {NoteGridComponent} from './NoteGridComponent';\r\n\r\nexport class PitchRuler extends Component {\r\n  private lastMouseX: number;\r\n  private lastMouseY: number;\r\n\r\n  private dragStarted: boolean = false;\r\n  private currentlyTranslating: boolean = false;\r\n  private currentlyZooming: boolean = false;\r\n  private consecutiveHorizontalDrag: number = 0;\r\n  private consecutiveVerticalDrag: number = 0;\r\n\r\n  private isPreviewingNote: boolean = false;\r\n  private lastPreviewedPitch: number = null;\r\n\r\n  constructor(private readonly model: SequencerDisplayModel, private grid: NoteGridComponent) {\r\n    super();\r\n  }\r\n\r\n  public mousePressed(event: ComponentMouseEvent): void {\r\n    const pos = this.getPosition();\r\n\r\n    if ((! this.isPianoRollVisible()) || event.position.x < pos.x + this.width / 2) {\r\n      // If we're not on the piano roll (bc it's hidden or clicking on its left)\r\n      this.dragStarted = true;\r\n    } else if (this.isPianoRollVisible() && event.position.x > pos.x + this.width / 2) {\r\n      // If we're on the piano roll\r\n      this.previewNoteAt(event.position.y);\r\n    }\r\n\r\n    this.lastMouseX = event.position.x;\r\n    this.lastMouseY = event.position.y;\r\n  }\r\n\r\n  public mouseDragged(event: ComponentMouseEvent): void {\r\n    const pos = this.getPosition();\r\n\r\n    if (this.dragStarted) {\r\n      const yOffset = event.position.y - this.lastMouseY;\r\n      const xOffset = event.position.x - this.lastMouseX;\r\n\r\n      this.lastMouseY = event.position.y;\r\n      this.lastMouseX = event.position.x;\r\n\r\n      if (this.shouldTranslate(xOffset, yOffset)) {\r\n        this.translate(yOffset);\r\n      } else {\r\n        if (xOffset > 0) {\r\n          this.zoomIn();\r\n        } else {\r\n          this.zoomOut();\r\n        }\r\n      }\r\n    } else if (this.isPianoRollVisible() && event.position.x > pos.x + this.width / 2) {\r\n      this.previewNoteAt(event.position.y);\r\n    }\r\n  }\r\n\r\n  public mouseReleased(/* event: ComponentMouseEvent */): void {\r\n    this.currentlyTranslating = false;\r\n    this.currentlyZooming = false;\r\n    this.dragStarted = false;\r\n    this.consecutiveHorizontalDrag = 0;\r\n    this.consecutiveVerticalDrag = 0;\r\n\r\n    if (this.isPreviewingNote) {\r\n      // TODO\r\n      // this.model.onPianoRollChange (-1);\r\n      this.isPreviewingNote = false;\r\n    }\r\n  }\r\n\r\n  public doubleClicked(event: ComponentMouseEvent): void {\r\n    this.model.verticalRange.start = MIN_PITCH;\r\n    this.model.verticalRange.end = MAX_PITCH;\r\n\r\n    this.getParentComponent().repaint();\r\n  }\r\n\r\n  protected resized(): void {\r\n  }\r\n\r\n  protected render(g: CanvasRenderingContext2D): void {\r\n    const bounds = this.getLocalBounds();\r\n\r\n    g.fillStyle = this.model.colors.background;\r\n    g.fillRect(0, 0, this.width, this.height);\r\n\r\n    const start = this.model.verticalRange.start;\r\n    const end = this.model.verticalRange.end;\r\n    const semiHeight = this.grid.getSemitoneHeight();\r\n\r\n    // piano roll\r\n    if (this.isPianoRollVisible()) {\r\n      for (let i = Math.floor(start); i <= Math.ceil(end); ++i) {\r\n        const y = bounds.height - (i - start) * semiHeight;\r\n        const pitchClass = i % 12;\r\n        const isBlack = PITCH_PATTERN[pitchClass];\r\n\r\n        g.fillStyle = isBlack ?\r\n          g.fillStyle = this.model.colors.blackKey :\r\n          g.fillStyle = this.model.colors.whiteKey;\r\n\r\n        g.fillRect(bounds.width / 2, y - semiHeight,\r\n          bounds.width / 2, semiHeight);\r\n\r\n        // stroke\r\n        g.fillStyle = this.model.colors.strokeLight;\r\n        g.fillRect(bounds.width / 2, y - semiHeight,\r\n          bounds.width / 2, 1);\r\n      }\r\n\r\n      // left border\r\n      g.fillStyle = this.model.colors.strokeLight;\r\n      g.fillRect(bounds.width / 2, 0, 1, bounds.height);\r\n    }\r\n\r\n    // Octave labels\r\n    for (let i = 0; i < 128; i += 12) {\r\n      if (i >= start && i <= end) {\r\n        const y = bounds.height - (i - start) * semiHeight;\r\n        const txt = 'C' + ((i / 12) - 2);\r\n\r\n        g.fillStyle = this.model.colors.text;\r\n        g.fillText(txt, 2, y - 3, bounds.width / 2);\r\n\r\n        g.fillStyle = this.model.colors.strokeDark;\r\n        g.fillRect(0, y, bounds.width, 1);\r\n      }\r\n    }\r\n\r\n    // right border\r\n    g.fillStyle = this.model.colors.strokeDark;\r\n    g.fillRect(bounds.width - 1, 0, 1, bounds.height);\r\n  }\r\n\r\n  private previewNoteAt(y: number): void {\r\n    const p = this.grid.getPitchAt(y);\r\n\r\n    if (p == this.lastPreviewedPitch)\r\n      return;\r\n\r\n    this.isPreviewingNote = true;\r\n    this.lastPreviewedPitch = p;\r\n\r\n    // TODO\r\n    // owner.onPianoRollChange(p);\r\n  }\r\n\r\n  private zoomIn(): void {\r\n    const range = this.model.verticalRange.end - this.model.verticalRange.start;\r\n    const semiHeight = this.grid.getSemitoneHeight();\r\n\r\n    if (semiHeight < MAX_SEMI_H) {\r\n      const zoomAmount = range / this.model.zoomSensitivity;\r\n\r\n      this.model.verticalRange.start += zoomAmount;\r\n      this.model.verticalRange.end -= zoomAmount;\r\n\r\n      this.getParentComponent().repaint();\r\n    }\r\n  }\r\n\r\n  private zoomOut(): void {\r\n    const start = this.model.verticalRange.start;\r\n    const end = this.model.verticalRange.end;\r\n    const range = end - start;\r\n    const zoomAmount = range / this.model.zoomSensitivity;\r\n\r\n    this.model.verticalRange.start -= zoomAmount;\r\n    this.model.verticalRange.end += zoomAmount;\r\n\r\n    this.model.verticalRange.end = Math.min(this.model.verticalRange.end, MAX_PITCH);\r\n    this.model.verticalRange.start = Math.max(this.model.verticalRange.start, MIN_PITCH);\r\n\r\n    this.getParentComponent().repaint();\r\n  }\r\n\r\n  private translate(amount: number): void {\r\n    const start = this.model.verticalRange.start;\r\n    const end = this.model.verticalRange.end;\r\n    const semiHeight = this.grid.getSemitoneHeight();\r\n\r\n    if (amount < 0) {\r\n      const desiredMin = start + amount / semiHeight;\r\n      const clipped = Math.max(desiredMin, MIN_PITCH);\r\n      const correctAmount = (clipped - desiredMin) + (amount / semiHeight);\r\n\r\n      this.model.verticalRange.start = clipped;\r\n      this.model.verticalRange.end += correctAmount;\r\n\r\n      this.getParentComponent().repaint();\r\n    } else if (amount > 0) {\r\n      const desiredMax = end + amount / semiHeight;\r\n      const clipped = Math.min(desiredMax, MAX_PITCH);\r\n      const correctAmount = (clipped - desiredMax) + (amount / semiHeight);\r\n\r\n      this.model.verticalRange.end = clipped;\r\n      this.model.verticalRange.start += correctAmount;\r\n\r\n      this.getParentComponent().repaint();\r\n    }\r\n  }\r\n\r\n  private shouldTranslate(xOffset: number, yOffset: number): boolean {\r\n    const changeThreshold = 8;\r\n    const consecutiveThreshold = 5;\r\n\r\n    if (Math.abs(xOffset) > Math.abs(yOffset)) {\r\n      this.consecutiveHorizontalDrag++;\r\n      this.consecutiveVerticalDrag = 0;\r\n    } else if (Math.abs(yOffset) > Math.abs(xOffset)) {\r\n      this.consecutiveVerticalDrag++;\r\n      this.consecutiveHorizontalDrag = 0;\r\n    }\r\n\r\n    if (this.currentlyTranslating) {\r\n      const shouldZoom = Math.abs(xOffset) > Math.abs(changeThreshold + yOffset)\r\n        || this.consecutiveHorizontalDrag > consecutiveThreshold;\r\n      this.currentlyTranslating = !shouldZoom;\r\n      this.currentlyZooming = shouldZoom;\r\n      return !shouldZoom\r\n    } else if (this.currentlyZooming) {\r\n      const shouldTranslate = Math.abs(yOffset) > Math.abs(changeThreshold + xOffset)\r\n        || this.consecutiveVerticalDrag > consecutiveThreshold;\r\n      this.currentlyTranslating = shouldTranslate;\r\n      this.currentlyZooming = !shouldTranslate;\r\n      return shouldTranslate;\r\n    } else {\r\n      const shouldTranslate = Math.abs(yOffset) > Math.abs(xOffset);\r\n      this.currentlyTranslating = shouldTranslate;\r\n      this.currentlyZooming = !shouldTranslate;\r\n      return shouldTranslate;\r\n    }\r\n  }\r\n\r\n  private isPianoRollVisible(): boolean {\r\n    return this.grid.getSemitoneHeight() > MIN_SEMI_H;\r\n  }\r\n}\r\n","import {Range, SequencerDisplayModel} from '../note-sequencer';\r\nimport {clamp} from '../utils';\r\nimport {Component, ComponentMouseEvent} from './BaseComponent';\r\nimport {NoteGridComponent} from './NoteGridComponent';\r\n\r\nexport class TimeRuler extends Component {\r\n  private timeAtMouseDown: number;\r\n  private rangeAtMouseDown: Range;\r\n  private zoomAtMouseDown: number;\r\n\r\n  constructor(private readonly model: SequencerDisplayModel, private readonly grid: NoteGridComponent) {\r\n    super();\r\n  }\r\n\r\n  public mousePressed(event: ComponentMouseEvent): void {\r\n    this.timeAtMouseDown = this.grid.getTimeAt(event.position.x);\r\n    this.rangeAtMouseDown = {...this.model.visibleTimeRange};\r\n    this.zoomAtMouseDown = (this.model.maxTimeRange.end - this.model.maxTimeRange.start) /\r\n      (this.model.visibleTimeRange.end - this.model.visibleTimeRange.start);\r\n  }\r\n\r\n  public doubleClicked(event: ComponentMouseEvent): void {\r\n    this.model.visibleTimeRange.start = 0;\r\n    this.model.visibleTimeRange.end = this.model.maxTimeRange.end;\r\n    this.getParentComponent().repaint();\r\n  }\r\n\r\n  public mouseDragged(event: ComponentMouseEvent): void {\r\n    const dragSensitivity = -0.0015;\r\n    const minimalRange = 1;\r\n\r\n    const dragOffset = event.positionAtMouseDown.y - event.position.y;\r\n    const toAdd = (this.model.maxTimeRange.end - this.model.maxTimeRange.start) * dragOffset * dragSensitivity;\r\n    const amountToAdd = toAdd / 2;\r\n\r\n    let newStart = this.rangeAtMouseDown.start + amountToAdd;\r\n    let newEnd = this.rangeAtMouseDown.end - amountToAdd;\r\n\r\n    // Compute the quantity to remove to ensure the resulting range is above the minimal range\r\n    const excess = Math.max(0, minimalRange - (newEnd - newStart));\r\n    newStart -= excess * 0.5;\r\n    newEnd += excess * 0.5;\r\n\r\n    // Pre-apply the new range\r\n    this.model.visibleTimeRange.start = Math.max(this.model.maxTimeRange.start, newStart);\r\n    this.model.visibleTimeRange.end = Math.min(this.model.maxTimeRange.end, newEnd);\r\n\r\n    // Compute the offset to the anchor under the mouse\r\n    let offset = this.timeAtMouseDown - this.grid.getTimeAt(event.position.x);\r\n\r\n    // Constraint this offset to stay in the maximal range\r\n    const distanceToLeft = this.model.maxTimeRange.start - this.model.visibleTimeRange.start;\r\n    const distanceToRight = this.model.visibleTimeRange.end - this.model.maxTimeRange.end;\r\n    offset = clamp(offset, distanceToLeft, -distanceToRight);\r\n\r\n    // Apply the constrained offset\r\n    this.model.visibleTimeRange.start = Math.max(this.model.maxTimeRange.start, newStart + offset);\r\n    this.model.visibleTimeRange.end = Math.min(this.model.maxTimeRange.end, newEnd + offset);\r\n\r\n    this.getParentComponent().repaint();\r\n  }\r\n\r\n  protected resized(): void {\r\n  }\r\n\r\n  protected render(g: CanvasRenderingContext2D): void {\r\n    const bounds = this.getLocalBounds();\r\n\r\n    g.fillStyle = this.model.colors.background;\r\n    g.fillRect(0, 0, this.width, this.height);\r\n\r\n    const start = this.model.visibleTimeRange.start;\r\n    const end = this.model.visibleTimeRange.end;\r\n    const sixteenth = this.grid.getSixteenthWidth();\r\n\r\n    if (sixteenth < 0.0001 || sixteenth === Infinity) {\r\n      // escape overly intensive calculation or even potential infinite loop\r\n      return;\r\n    }\r\n\r\n    const minLabelSpacing = 50;\r\n    const minGraduationSpacing = 5;\r\n\r\n    let ratio = 1;\r\n\r\n    while (sixteenth * ratio < minLabelSpacing)\r\n      ratio *= 2;\r\n\r\n    let incr = 1;\r\n\r\n    if (sixteenth * incr < minGraduationSpacing) {\r\n      while (sixteenth * incr < minGraduationSpacing)\r\n        incr *= 2;\r\n    } else {\r\n      while (sixteenth * incr * 0.5 > minGraduationSpacing)\r\n        incr *= .5;\r\n    }\r\n\r\n    for (let i = 0; i < Math.ceil(end); i += incr) {\r\n      const x = (i - start) * sixteenth;\r\n\r\n      if (x < 0)\r\n        continue;\r\n\r\n      const gradH = i % (incr * 4) == 0 ? 0.4 : 0.12;\r\n\r\n      g.fillStyle = this.model.colors.strokeLight;\r\n      g.fillRect(x, bounds.height * (1 - gradH), 1, bounds.height * gradH);\r\n\r\n      if (i % ratio == 0) {\r\n        g.rect(x + 1, bounds.height * (1 - gradH), 1, 1);\r\n\r\n        g.fillStyle = this.model.colors.text;\r\n        const text = this.grid.getStringForTime(i, true);\r\n        g.fillText(text, x + 4, bounds.height - 5, minLabelSpacing);\r\n      }\r\n    }\r\n\r\n    // Bottom border\r\n    g.fillStyle = this.model.colors.strokeDark;\r\n    g.fillRect(0, bounds.height - 1, bounds.width, 1);\r\n  }\r\n}","\r\n/**\r\n * Constrain a numeric value between two numeric bounds. The order between the bounds isn't relevant.\r\n *\r\n * @param value the value to constrain\r\n * @param a first bound\r\n * @param b second bound\r\n */\r\nexport function clamp(value: number, a: number, b: number): number {\r\n  const min = Math.min(a, b);\r\n  const max = Math.max(a, b);\r\n  return Math.min(Math.max(min, value), max);\r\n}\r\n","import {SequencerDisplayModel} from '../note-sequencer';\r\nimport {Component} from './BaseComponent';\r\n\r\nexport class VelocityRuler extends Component {\r\n\r\n  constructor(private readonly model: SequencerDisplayModel) {\r\n    super();\r\n  }\r\n\r\n  protected render(g: CanvasRenderingContext2D): void {\r\n    g.fillStyle = this.model.colors.background;\r\n    g.fillRect (0, 0, this.width, this.height);\r\n\r\n    const largeGradW = 10;\r\n    const smallGradW = 5;\r\n\r\n    g.fillStyle = this.model.colors.strokeLight;\r\n\r\n    // Ruler border\r\n    g.fillRect (this.width - 1, 0, 1, this.height);\r\n\r\n    // Top grad\r\n    g.fillRect(this.width - largeGradW, 0, largeGradW, 1);\r\n    g.fillStyle = this.model.colors.text;\r\n    g.fillText(\"100%\", this.width - 30, 12);\r\n\r\n    // Mid grad\r\n    g.fillRect(this.width - largeGradW, Math.round(this.height * 0.5), largeGradW, 1);\r\n\r\n    // Bottom grad\r\n    g.fillRect(this.width - largeGradW, this.height - 1, largeGradW, 1);\r\n\r\n    // Intermediary grads\r\n    if (this.height > 60) {\r\n      g.fillRect(this.width - smallGradW, Math.round(this.height * 0.25), smallGradW, 1);\r\n      g.fillRect(this.width - smallGradW, Math.round(this.height * 0.75), smallGradW, 1);\r\n    }\r\n\r\n    g.fillStyle = this.model.colors.text;\r\n    g.fillText(\"0\", this.width - 20, this.height - 2);\r\n  }\r\n\r\n  protected resized(): void {\r\n  }\r\n\r\n}","import {MAX_PITCH, SequencerDisplayModel} from '../note-sequencer';\r\nimport {Component, ComponentMouseEvent, ComponentPosition} from './BaseComponent';\r\nimport {LassoSelector} from './LassoSelector';\r\nimport {Note, NoteGridComponent} from './NoteGridComponent';\r\nimport {drawTimeBackground, squaredDistance} from './RenderHelpers';\r\n\r\nexport class VelocityTrack extends Component {\r\n\r\n  private readonly handleRadius: number = 3;\r\n\r\n  private _draggingHandle: boolean;\r\n  private _mouseDownResult: boolean;\r\n  private _initialVelocity: number;\r\n\r\n  private readonly lasso: LassoSelector<Note>;\r\n\r\n  constructor(private readonly model: SequencerDisplayModel, private readonly grid: NoteGridComponent) {\r\n    super();\r\n\r\n    this.lasso = new LassoSelector<Note>(this, this.grid.selectedSet, this.model.colors);\r\n\r\n    this.lasso.findAllElementsInLasso = (lassoBounds) => {\r\n      const vScale = this.height / MAX_PITCH;\r\n\r\n      return this.grid.notes.filter((note) => {\r\n\r\n        const noteBounds = {\r\n          x: this.grid.getPositionForTime(note.time) - this.handleRadius,\r\n          y: this.height - (note.velocity * vScale) - this.handleRadius,\r\n          width: this.handleRadius * 2,\r\n          height: this.handleRadius * 2,\r\n        };\r\n\r\n        return Component.boundsIntersect(noteBounds, lassoBounds);\r\n      })\r\n    };\r\n  }\r\n\r\n  public mousePressed(event: ComponentMouseEvent): void {\r\n    const pos = this.getPosition();\r\n\r\n    const local = {\r\n      x: event.position.x - pos.x,\r\n      y: event.position.y - pos.y,\r\n    };\r\n\r\n    this._draggingHandle = false;\r\n\r\n    const handle = this.findHandleAt(local);\r\n\r\n    if (handle == null) {\r\n      if (!event.modifiers.shift) {\r\n        this.grid.selectedSet.deselectAll();\r\n      }\r\n\r\n      this.lasso.beginLasso(event);\r\n      this._mouseDownResult = true;\r\n\r\n      return;\r\n    }\r\n\r\n    this._initialVelocity = handle.velocity;\r\n\r\n    this.grid.selectedSet.getItems().forEach((note) => {\r\n      note.initialVelocity = note.velocity;\r\n    });\r\n\r\n    // handle is actually a reference to the note\r\n    this.grid.moveNoteToFront(handle);\r\n    this._draggingHandle = true;\r\n\r\n    this._mouseDownResult = this.grid.selectedSet.addToSelectionMouseDown(handle, event.modifiers.shift);\r\n  }\r\n\r\n  public mouseDragged(event: ComponentMouseEvent): void {\r\n    if (!event.wasDragged)\r\n      return;\r\n\r\n    if (this._draggingHandle) {\r\n      this.dragSelectedHandles(event);\r\n    } else {\r\n      this.lasso.dragLasso(event);\r\n    }\r\n\r\n    this.getParentComponent().repaint();\r\n  }\r\n\r\n  public mouseReleased(event: ComponentMouseEvent): void {\r\n    this.lasso.endLasso();\r\n\r\n    this.grid.selectedSet.addToSelectionMouseUp(event.wasDragged, event.modifiers.shift, this._mouseDownResult);\r\n\r\n    this.grid.notes.forEach((note) => {\r\n      note.initialVelocity = note.velocity;\r\n    });\r\n\r\n    this.getParentComponent().repaint();\r\n  }\r\n\r\n  protected render(g: CanvasRenderingContext2D): void {\r\n    // Background\r\n    g.fillStyle = this.model.colors.background;\r\n    g.fillRect(0, 0, this.width, this.height);\r\n\r\n    // Horizontal\r\n    const start = this.model.visibleTimeRange.start;\r\n    const end = this.model.visibleTimeRange.end;\r\n    const sixteenth = this.grid.getSixteenthWidth();\r\n\r\n    this.drawHorizontalBackground(g, sixteenth, start, end);\r\n\r\n    this.lasso.drawLasso(g);\r\n\r\n    this.drawVelocityHandles(g);\r\n  }\r\n\r\n  protected resized(): void {\r\n  }\r\n\r\n  private drawHorizontalBackground(g: CanvasRenderingContext2D, sixteenth: number,\r\n                                   start: number, end: number): void {\r\n    const incr = this.grid.getTimeIncrement();\r\n\r\n    if (incr <= 0) {\r\n      return;\r\n    }\r\n\r\n    drawTimeBackground(g, this.height, sixteenth, incr, start, end, this.model.signature, this.model.colors);\r\n  }\r\n\r\n  private drawVelocityHandles(g: CanvasRenderingContext2D): void {\r\n    const vScale = this.height / MAX_PITCH;\r\n\r\n    for (const n of this.grid.notes) {\r\n      if (n.hidden) {\r\n        continue;\r\n      }\r\n\r\n      const x = this.grid.getPositionForTime(n.time);\r\n\r\n      if (x < -5 || x > this.width + 5)\r\n        continue;\r\n\r\n      const h = n.velocity * vScale;\r\n      const y = (this.height - h);\r\n\r\n      const color = n.selected ? this.model.colors.velocityHandleSelected : this.model.colors.velocityHandle;\r\n      g.fillStyle = color;\r\n      g.fillRect(x - 1, y, 2, h);\r\n\r\n      g.strokeStyle = color;\r\n      g.fillStyle = this.model.colors.background;\r\n      g.lineWidth = 1.8;\r\n      g.beginPath();\r\n      g.arc(x, y, this.handleRadius, 0, Math.PI * 2);\r\n      g.fill();\r\n      g.stroke();\r\n    }\r\n  }\r\n\r\n  private dragSelectedHandles(event: ComponentMouseEvent): void {\r\n    const vScale = this.height / MAX_PITCH;\r\n    const dragOffset = event.position.y - event.positionAtMouseDown.y;\r\n\r\n    const scaled = dragOffset / vScale;\r\n\r\n    for (const selected of this.grid.selectedSet.getItems()) {\r\n      selected.velocity = selected.initialVelocity - scaled;\r\n      selected.velocity = Math.min(MAX_PITCH, Math.max(1, selected.velocity));\r\n    }\r\n  }\r\n\r\n  private findHandleAt(pos: ComponentPosition): Note {\r\n    let vScale = this.height / MAX_PITCH;\r\n    const squaredHitDistance = 64;\r\n\r\n    // We need to iterate from end to start to have front most notes first\r\n    for (const note of this.grid.notes) {\r\n      const x = this.grid.getPositionForTime(note.time);\r\n      const y = this.height - note.velocity * vScale;\r\n\r\n      if (squaredDistance(pos.x, pos.y, x, y) < squaredHitDistance)\r\n        return note;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}","export interface CustomColor {\r\n  name: string,\r\n  cssName: string,\r\n  defaultValue: string,\r\n  value: string,\r\n}\r\n\r\nexport abstract class CustomElement extends HTMLElement {\r\n  protected readonly customColors: CustomColor[] = [];\r\n\r\n  public static getCssName(propertyName: string): string {\r\n    return '--' + propertyName.split(/(?=[A-Z])/).join('-').toLowerCase();\r\n  }\r\n\r\n  protected registerCustomColor(name: string, defaultValue: string) : void {\r\n    const cssName = CustomElement.getCssName(name);\r\n    const state = {name, cssName, defaultValue, value: defaultValue};\r\n    this.customColors.push(state);\r\n  }\r\n\r\n  protected styleChanged(): void {\r\n    const computedStyle = window.getComputedStyle(this, null);\r\n\r\n    this.customColors.forEach((colorState) => {\r\n      colorState.value = computedStyle.getPropertyValue(colorState.cssName) || colorState.value;\r\n    })\r\n  }\r\n\r\n}"],"sourceRoot":""}